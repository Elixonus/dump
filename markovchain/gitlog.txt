commit d6923fc3fa3bde625a9d424118d9066965ac3c45
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 24 10:40:09 2022 -0700

    added markovchain folder

diff --git a/main.py b/markovchain/main.py
similarity index 100%
rename from main.py
rename to markovchain/main.py
diff --git a/markov.py b/markovchain/markov.py
similarity index 100%
rename from markov.py
rename to markovchain/markov.py

commit 13b76fd1b08d2b6cbb56e306c18a433e65750fea
Author: Daxonus <elias@dobrin.net>
Date:   Wed Jun 22 10:50:29 2022 -0700

    added requirements

diff --git a/markovchain/main.py b/main.py
similarity index 100%
rename from markovchain/main.py
rename to main.py
diff --git a/markovchain/markov.py b/markov.py
similarity index 100%
rename from markovchain/markov.py
rename to markov.py
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..23c5aa3
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1,3 @@
+commonmark==0.9.1
+Pygments==2.12.0
+rich==12.4.4
\ No newline at end of file

commit 752de6b12eb44f8da7736f66923144487e374413
Author: Daxonus <elias@dobrin.net>
Date:   Wed Jun 22 10:44:52 2022 -0700

    update file structure

diff --git a/LICENSE.txt b/LICENSE
similarity index 100%
rename from LICENSE.txt
rename to LICENSE
diff --git a/command_line.py b/markovchain/main.py
similarity index 100%
rename from command_line.py
rename to markovchain/main.py
diff --git a/markov.py b/markovchain/markov.py
similarity index 100%
rename from markov.py
rename to markovchain/markov.py

commit cff99dd2331034a8e18d0129d21dcec88b40f0f4
Author: Elias Dobrin <elias@dobrin.net>
Date:   Mon Jun 13 13:06:51 2022 -0700

    fix license

diff --git a/LICENSE b/LICENSE.txt
similarity index 100%
rename from LICENSE
rename to LICENSE.txt

commit 099a5ba3215285925a1d1f700b222b89d81325a1
Author: Elias Dobrin <elias@dobrin.net>
Date:   Mon Jun 13 13:06:06 2022 -0700

    Create LICENSE

diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..9fe37c5
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2022 Elias Dobrin
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.

commit ed22f4a25ddde6bc50ac0da1144bfb83afbf1581
Author: Elias <elias@dobrin.net>
Date:   Mon Jun 13 13:05:39 2022 -0700

    cleanup

diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
index 13566b8..0000000
--- a/.idea/.gitignore
+++ /dev/null
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
deleted file mode 100644
index ef634de..0000000
--- a/.idea/inspectionProfiles/Project_Default.xml
+++ /dev/null
@@ -1,15 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <profile version="1.0">
-    <option name="myName" value="Project Default" />
-    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="ignoredPackages">
-        <value>
-          <list size="2">
-            <item index="0" class="java.lang.String" itemvalue="mazelib" />
-            <item index="1" class="java.lang.String" itemvalue="euclid" />
-          </list>
-        </value>
-      </option>
-    </inspection_tool>
-  </profile>
-</component>
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
deleted file mode 100644
index 105ce2d..0000000
--- a/.idea/inspectionProfiles/profiles_settings.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <settings>
-    <option name="USE_PROJECT_PROFILE" value="false" />
-    <version value="1.0" />
-  </settings>
-</component>
\ No newline at end of file
diff --git a/.idea/markov_chain.iml b/.idea/markov_chain.iml
deleted file mode 100644
index 8437fe6..0000000
--- a/.idea/markov_chain.iml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="PYTHON_MODULE" version="4">
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
index dc9ea49..0000000
--- a/.idea/misc.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
-</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
deleted file mode 100644
index 0c1bc6a..0000000
--- a/.idea/modules.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/markov_chain.iml" filepath="$PROJECT_DIR$/.idea/markov_chain.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
index 94a25f7..0000000
--- a/.idea/vcs.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
diff --git a/LICENSE b/LICENSE
deleted file mode 100644
index 9fe37c5..0000000
--- a/LICENSE
+++ /dev/null
@@ -1,21 +0,0 @@
-MIT License
-
-Copyright (c) 2022 Elias Dobrin
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.

commit e22b9458e9a12abba5d513befe249b7c2d49aaab
Author: Elias Dobrin <elias@dobrin.net>
Date:   Sat Jun 11 15:53:58 2022 -0700

    made dynamic text based on user input

diff --git a/main.py b/command_line.py
similarity index 51%
rename from main.py
rename to command_line.py
index 5802195..490ec80 100644
--- a/main.py
+++ b/command_line.py
@@ -2,7 +2,22 @@ from rich.console import Console
 from rich.table import Table
 from markov import Markov
 
-markov = Markov.from_string("cloudy sunny cloudy rainy cloudy sunny cloudy cloudy")
+markov: Markov
+
+while True:
+    try:
+        message = input("Input: ")
+        split = message.split(" ")
+        assert len(split) >= 2
+        for s in split:
+            assert len(s) >= 1
+        markov = Markov.from_string(message)
+        break
+    except:
+        print("Error try again.")
+        continue
+
+print()
 console = Console()
 table = Table(title="Markov Chain Events")
 table.add_column("Relationship")
@@ -10,3 +25,5 @@ table.add_column("Probability")
 for link in markov.get_links():
     table.add_row(f"{link.from_node.name} -> {link.node.name}", f"{link.weight:.3f}")
 console.print(table)
+
+input()

commit 1e5a67324a20f6a847b8b1aeafaa7a12f40bdef4
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 10 16:38:10 2022 -0700

    combined into just one table

diff --git a/main.py b/main.py
index c743a13..5802195 100644
--- a/main.py
+++ b/main.py
@@ -1,23 +1,12 @@
 from rich.console import Console
 from rich.table import Table
-from markov import Markov, Node, Link
-
-markov = Markov.from_string("a b c b b b a")
-print(markov.nodes[1].links)
+from markov import Markov
 
+markov = Markov.from_string("cloudy sunny cloudy rainy cloudy sunny cloudy cloudy")
 console = Console()
-
-table = Table(title="Markov Chain Nodes")
-table.add_column("Node Name")
-table.add_column("Node ID")
-for node in markov.get_nodes():
-    table.add_row(f"{node.name}", f"N{id(node)}")
-console.print(table)
-
-table = Table(title="Markov Chain Links")
-table.add_column("Link Relationship")
-table.add_column("Link Probability")
-table.add_column("Link ID")
+table = Table(title="Markov Chain Events")
+table.add_column("Relationship")
+table.add_column("Probability")
 for link in markov.get_links():
-    table.add_row(f"{link.from_node.name} -> {link.node.name}", f"{link.weight:.3f}", f"L{id(link)}")
-console.print(table)
\ No newline at end of file
+    table.add_row(f"{link.from_node.name} -> {link.node.name}", f"{link.weight:.3f}")
+console.print(table)

commit cdb6bc25409ab48e414823252f4ee295aaa1f2a3
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 10 16:13:11 2022 -0700

    tables printing successfully

diff --git a/main.py b/main.py
index 939d743..c743a13 100644
--- a/main.py
+++ b/main.py
@@ -1,4 +1,23 @@
+from rich.console import Console
+from rich.table import Table
 from markov import Markov, Node, Link
 
 markov = Markov.from_string("a b c b b b a")
-print(markov.nodes[1].links)
\ No newline at end of file
+print(markov.nodes[1].links)
+
+console = Console()
+
+table = Table(title="Markov Chain Nodes")
+table.add_column("Node Name")
+table.add_column("Node ID")
+for node in markov.get_nodes():
+    table.add_row(f"{node.name}", f"N{id(node)}")
+console.print(table)
+
+table = Table(title="Markov Chain Links")
+table.add_column("Link Relationship")
+table.add_column("Link Probability")
+table.add_column("Link ID")
+for link in markov.get_links():
+    table.add_row(f"{link.from_node.name} -> {link.node.name}", f"{link.weight:.3f}", f"L{id(link)}")
+console.print(table)
\ No newline at end of file
diff --git a/markov.py b/markov.py
index cbac510..86107fc 100644
--- a/markov.py
+++ b/markov.py
@@ -40,7 +40,7 @@ class Markov:
             nodes.append(node)
         # link construction
         for i, (n1, n2) in enumerate(pairwise(nodes)):
-            n1.links.append(Link(n2, 1))
+            n1.links.append(Link(n2, 1, n1))
         # dirty link cleanup
         for node in nodes:
             node.merge()
@@ -93,10 +93,12 @@ class Node:
 class Link:
     node: Node
     weight: float
+    from_node: Node
 
-    def __init__(self, node: Node, weight: float) -> None:
+    def __init__(self, node: Node, weight: float, from_node: Node) -> None:
         self.node = node
         self.weight = weight
+        self.from_node = from_node
 
     def __repr__(self) -> str:
         return f"Link with node: #{id(self.node)} weight: {self.weight}"

commit 5782899aeb5a2e57b36395fd4b7813c3293a6df5
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 10 14:48:20 2022 -0700

    fixed markov chain merging bugs

diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
index 0000000..13566b8
--- /dev/null
+++ b/.idea/.gitignore
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
index 0000000..ef634de
--- /dev/null
+++ b/.idea/inspectionProfiles/Project_Default.xml
@@ -0,0 +1,15 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredPackages">
+        <value>
+          <list size="2">
+            <item index="0" class="java.lang.String" itemvalue="mazelib" />
+            <item index="1" class="java.lang.String" itemvalue="euclid" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
index 0000000..105ce2d
--- /dev/null
+++ b/.idea/inspectionProfiles/profiles_settings.xml
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
diff --git a/.idea/markov_chain.iml b/.idea/markov_chain.iml
new file mode 100644
index 0000000..8437fe6
--- /dev/null
+++ b/.idea/markov_chain.iml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000..dc9ea49
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000..0c1bc6a
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/markov_chain.iml" filepath="$PROJECT_DIR$/.idea/markov_chain.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..94a25f7
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/main.py b/main.py
new file mode 100644
index 0000000..939d743
--- /dev/null
+++ b/main.py
@@ -0,0 +1,4 @@
+from markov import Markov, Node, Link
+
+markov = Markov.from_string("a b c b b b a")
+print(markov.nodes[1].links)
\ No newline at end of file
diff --git a/markov.py b/markov.py
index a755c44..cbac510 100644
--- a/markov.py
+++ b/markov.py
@@ -1,9 +1,6 @@
 from __future__ import annotations
 from random import choices as random, randint
-from itertools import pairwise
-import cairo
-import matplotlib.pyplot as plt
-import numpy as np
+from itertools import pairwise, combinations
 
 
 class Markov:
@@ -56,79 +53,6 @@ class Markov:
                 unique.append(node)
         return cls(unique)
 
-    def render(self) -> None:
-        width = 250 + 50 * len(self.get_links())
-        height = 150 + 100 * len(self.nodes)
-
-        surface = cairo.ImageSurface(cairo.FORMAT_RGB24, width, height)
-        ctx = cairo.Context(surface)
-        ctx.select_font_face("Arial")
-        ctx.set_source_rgb(1, 0.8784, 0.6666)
-        ctx.rectangle(0, 0, width, height)
-        ctx.fill()
-
-        ctx.translate(0.1 * width, 0)
-
-        def draw_arrow(node1: Node, node2: Node, weight, arrow_number) -> None:
-            # got to also make repeating cycles rendered on the side as circle
-            ctx.translate(0, -10 * min(arrow_number, 4))
-            ctx.move_to(0.5 * width + 10, 140 + 100 * self.nodes.index(node1))
-            ctx.translate(-50 * arrow_number, 0)
-            ctx.line_to(0.5 * width - 30, 140 + 100 * self.nodes.index(node1))
-            ctx.line_to(0.5 * width - 30, 140 + 100 * self.nodes.index(node2))
-            ctx.translate(50 * arrow_number, 0)
-            ctx.line_to(0.5 * width + 10, 140 + 100 * self.nodes.index(node2))
-            ctx.stroke()
-            ctx.set_font_size(20)
-            ctx.translate(-50 * arrow_number, 0)
-            ctx.move_to(0.5 * width - 70, 140 + 100 * (self.nodes.index(node1) + self.nodes.index(node2)) / 2)
-            ctx.show_text(f"{weight:.2f}")
-            ctx.translate(50 * arrow_number, 0)
-            ctx.translate(0, 10 * min(arrow_number, 4))
-        for node in self.nodes:
-            for l, link in enumerate(node.links):
-                from random import random
-                ctx.set_source_rgb(0.8 * (self.nodes.index(node) / (len(self.nodes) - 1)), 0, 0)
-                ctx.set_line_width(5)
-                draw_arrow(node, link.node, link.weight, self.nodes.index(node))
-        ctx.set_font_size(40)
-        for n, node in enumerate(self.nodes):
-            text_width = ctx.text_extents(node.name).width
-            ctx.rectangle(0.5 * width, 100 + 100 * n, text_width + 25, 50)
-            ctx.set_source_rgb(1, 1, 1)
-            ctx.fill_preserve()
-            ctx.set_source_rgb(0, 0, 0)
-            ctx.set_line_width(5)
-            ctx.stroke()
-            ctx.move_to(0.5 * width + 10, 140 + 100 * n)
-            ctx.set_source_rgb(0, 0, 0)
-            ctx.show_text(node.name)
-
-        raw = surface.get_data().tolist()
-        counter = 0
-        image = np.empty((width, height, 3), dtype=np.uint8)
-        for x in range(width):
-            for y in range(height):
-                for c in range(3):
-                    image[x][y][2 - c] = raw[counter]
-                    counter += 1
-                counter += 1
-
-        rolls = []
-        roll = randint(0, len(self.nodes) - 1)
-        for r in range(10):
-            node = self.nodes[roll].get_node()
-            roll = self.nodes.index(node)
-            rolls.append(roll)
-
-        fig, ax = plt.subplots()
-        ax.plot(rolls)
-
-        fig, ax = plt.subplots()
-        ax.imshow(image)
-        ax.set_title(f"Markov Chain for {len(self.nodes)} nodes")
-        plt.show()
-
 
 class Node:
     links: list[Link]
@@ -158,14 +82,12 @@ class Node:
             link.weight /= total
 
     def merge(self) -> None:
-        for l1 in range(len(self.links)):
-            for l2 in range(len(self.links) + 1, len(self.links)):
-                link1 = self.links[l1]
-                link2 = self.links[l2]
-                if link1.node is link2.node:
-                    link1.weight += link2.weight
-                    del self.links[l2]
-                    l2 -= 1
+        removed_links = []
+        for link1, link2 in combinations(self.links, 2):
+            if link1.node is link2.node:
+                link1.weight += link2.weight
+                removed_links.append(link2)
+        self.links = [link for link in self.links if link not in removed_links]
 
 
 class Link:

commit c8f7bd6e81f3dd24b9a751621ffc7f20e2cd21b8
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 10 14:21:08 2022 -0700

    Create .gitignore

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..b6e4761
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,129 @@
+# Byte-compiled / optimized / DLL files
+__pycache__/
+*.py[cod]
+*$py.class
+
+# C extensions
+*.so
+
+# Distribution / packaging
+.Python
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+wheels/
+pip-wheel-metadata/
+share/python-wheels/
+*.egg-info/
+.installed.cfg
+*.egg
+MANIFEST
+
+# PyInstaller
+#  Usually these files are written by a python script from a template
+#  before PyInstaller builds the exe, so as to inject date/other infos into it.
+*.manifest
+*.spec
+
+# Installer logs
+pip-log.txt
+pip-delete-this-directory.txt
+
+# Unit test / coverage reports
+htmlcov/
+.tox/
+.nox/
+.coverage
+.coverage.*
+.cache
+nosetests.xml
+coverage.xml
+*.cover
+*.py,cover
+.hypothesis/
+.pytest_cache/
+
+# Translations
+*.mo
+*.pot
+
+# Django stuff:
+*.log
+local_settings.py
+db.sqlite3
+db.sqlite3-journal
+
+# Flask stuff:
+instance/
+.webassets-cache
+
+# Scrapy stuff:
+.scrapy
+
+# Sphinx documentation
+docs/_build/
+
+# PyBuilder
+target/
+
+# Jupyter Notebook
+.ipynb_checkpoints
+
+# IPython
+profile_default/
+ipython_config.py
+
+# pyenv
+.python-version
+
+# pipenv
+#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
+#   However, in case of collaboration, if having platform-specific dependencies or dependencies
+#   having no cross-platform support, pipenv may install dependencies that don't work, or not
+#   install all needed dependencies.
+#Pipfile.lock
+
+# PEP 582; used by e.g. github.com/David-OConnor/pyflow
+__pypackages__/
+
+# Celery stuff
+celerybeat-schedule
+celerybeat.pid
+
+# SageMath parsed files
+*.sage.py
+
+# Environments
+.env
+.venv
+env/
+venv/
+ENV/
+env.bak/
+venv.bak/
+
+# Spyder project settings
+.spyderproject
+.spyproject
+
+# Rope project settings
+.ropeproject
+
+# mkdocs documentation
+/site
+
+# mypy
+.mypy_cache/
+.dmypy.json
+dmypy.json
+
+# Pyre type checker
+.pyre/

commit fcb4743c88fca9cf74f4f4cb15e0da0613971267
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 10 14:18:02 2022 -0700

    Create markov.py

diff --git a/markov.py b/markov.py
new file mode 100644
index 0000000..a755c44
--- /dev/null
+++ b/markov.py
@@ -0,0 +1,180 @@
+from __future__ import annotations
+from random import choices as random, randint
+from itertools import pairwise
+import cairo
+import matplotlib.pyplot as plt
+import numpy as np
+
+
+class Markov:
+    nodes: list[Node]
+
+    def __init__(self, nodes: list[Node]) -> None:
+        self.nodes = nodes
+
+    def get_nodes(self) -> list[Node]:
+        nodes = self.nodes.copy()
+        return nodes
+
+    def get_links(self) -> list[Link]:
+        links = []
+        for node in self.nodes:
+            links.extend(node.links)
+        return links
+
+    def get_node(self, entry_node: int) -> Node:
+        return self.nodes[entry_node].get_node()
+
+    def get_link(self, entry_node: int) -> Link:
+        return self.nodes[entry_node].get_link()
+
+    @classmethod
+    def from_string(cls, string: str) -> Markov:
+        # node construction
+        strings = string.split(" ")
+        nodes = []
+        for i, s in enumerate(strings):
+            try:
+                index = strings.index(s, 0, i)
+            except ValueError:
+                node = Node([], s)
+            else:
+                node = nodes[index]
+            nodes.append(node)
+        # link construction
+        for i, (n1, n2) in enumerate(pairwise(nodes)):
+            n1.links.append(Link(n2, 1))
+        # dirty link cleanup
+        for node in nodes:
+            node.merge()
+        for node in nodes:
+            node.normalize()
+        # unique nodes only
+        unique = []
+        for node in nodes:
+            if node not in unique:
+                unique.append(node)
+        return cls(unique)
+
+    def render(self) -> None:
+        width = 250 + 50 * len(self.get_links())
+        height = 150 + 100 * len(self.nodes)
+
+        surface = cairo.ImageSurface(cairo.FORMAT_RGB24, width, height)
+        ctx = cairo.Context(surface)
+        ctx.select_font_face("Arial")
+        ctx.set_source_rgb(1, 0.8784, 0.6666)
+        ctx.rectangle(0, 0, width, height)
+        ctx.fill()
+
+        ctx.translate(0.1 * width, 0)
+
+        def draw_arrow(node1: Node, node2: Node, weight, arrow_number) -> None:
+            # got to also make repeating cycles rendered on the side as circle
+            ctx.translate(0, -10 * min(arrow_number, 4))
+            ctx.move_to(0.5 * width + 10, 140 + 100 * self.nodes.index(node1))
+            ctx.translate(-50 * arrow_number, 0)
+            ctx.line_to(0.5 * width - 30, 140 + 100 * self.nodes.index(node1))
+            ctx.line_to(0.5 * width - 30, 140 + 100 * self.nodes.index(node2))
+            ctx.translate(50 * arrow_number, 0)
+            ctx.line_to(0.5 * width + 10, 140 + 100 * self.nodes.index(node2))
+            ctx.stroke()
+            ctx.set_font_size(20)
+            ctx.translate(-50 * arrow_number, 0)
+            ctx.move_to(0.5 * width - 70, 140 + 100 * (self.nodes.index(node1) + self.nodes.index(node2)) / 2)
+            ctx.show_text(f"{weight:.2f}")
+            ctx.translate(50 * arrow_number, 0)
+            ctx.translate(0, 10 * min(arrow_number, 4))
+        for node in self.nodes:
+            for l, link in enumerate(node.links):
+                from random import random
+                ctx.set_source_rgb(0.8 * (self.nodes.index(node) / (len(self.nodes) - 1)), 0, 0)
+                ctx.set_line_width(5)
+                draw_arrow(node, link.node, link.weight, self.nodes.index(node))
+        ctx.set_font_size(40)
+        for n, node in enumerate(self.nodes):
+            text_width = ctx.text_extents(node.name).width
+            ctx.rectangle(0.5 * width, 100 + 100 * n, text_width + 25, 50)
+            ctx.set_source_rgb(1, 1, 1)
+            ctx.fill_preserve()
+            ctx.set_source_rgb(0, 0, 0)
+            ctx.set_line_width(5)
+            ctx.stroke()
+            ctx.move_to(0.5 * width + 10, 140 + 100 * n)
+            ctx.set_source_rgb(0, 0, 0)
+            ctx.show_text(node.name)
+
+        raw = surface.get_data().tolist()
+        counter = 0
+        image = np.empty((width, height, 3), dtype=np.uint8)
+        for x in range(width):
+            for y in range(height):
+                for c in range(3):
+                    image[x][y][2 - c] = raw[counter]
+                    counter += 1
+                counter += 1
+
+        rolls = []
+        roll = randint(0, len(self.nodes) - 1)
+        for r in range(10):
+            node = self.nodes[roll].get_node()
+            roll = self.nodes.index(node)
+            rolls.append(roll)
+
+        fig, ax = plt.subplots()
+        ax.plot(rolls)
+
+        fig, ax = plt.subplots()
+        ax.imshow(image)
+        ax.set_title(f"Markov Chain for {len(self.nodes)} nodes")
+        plt.show()
+
+
+class Node:
+    links: list[Link]
+    name: str | None
+
+    def __init__(self, links: list[Link], name: str = None) -> None:
+        self.links = links
+        self.name = name
+
+    def __repr__(self) -> str:
+        if self.name is None:
+            return f"Node with #{id(self)}"
+        else:
+            return f"Node \"{self.name}\" with #{id(self)}"
+
+    def get_node(self) -> Node:
+        node = random(self.links, weights=[link.weight for link in self.links])[0].node
+        return node
+
+    def get_link(self) -> Link:
+        link = random(self.links, weights=[link.weight for link in self.links])[0]
+        return link
+
+    def normalize(self) -> None:
+        total = sum(link.weight for link in self.links)
+        for link in self.links:
+            link.weight /= total
+
+    def merge(self) -> None:
+        for l1 in range(len(self.links)):
+            for l2 in range(len(self.links) + 1, len(self.links)):
+                link1 = self.links[l1]
+                link2 = self.links[l2]
+                if link1.node is link2.node:
+                    link1.weight += link2.weight
+                    del self.links[l2]
+                    l2 -= 1
+
+
+class Link:
+    node: Node
+    weight: float
+
+    def __init__(self, node: Node, weight: float) -> None:
+        self.node = node
+        self.weight = weight
+
+    def __repr__(self) -> str:
+        return f"Link with node: #{id(self.node)} weight: {self.weight}"

commit dd673756a30eb9ea11ff141fea2cb30b6a766a9c
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 10 14:16:50 2022 -0700

    Initial commit

diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000..dfe0770
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,2 @@
+# Auto detect text files and perform LF normalization
+* text=auto
diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..9fe37c5
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2022 Elias Dobrin
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
