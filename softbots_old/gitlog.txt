commit e3cea7bea0dfd87da783c4a1486e1e6322b66ad8
Merge: 1501b01 bf9b695
Author: Elias Dobrin <elias@dobrin.net>
Date:   Sun Jun 26 14:00:21 2022 -0700

    Merge pull request #1 from mattiacoll/pr

commit bf9b6954b60cd12f3d158b0c21f692d2eafb49b1
Author: mattiacoll <64754556+mattiacoll@users.noreply.github.com>
Date:   Sun Jun 26 20:42:56 2022 +0200

    Reverted .gitignore to JetBrains

diff --git a/.gitignore b/.gitignore
index 55361f7..5236f57 100644
--- a/.gitignore
+++ b/.gitignore
@@ -128,7 +128,7 @@ dmypy.json
 # Pyre type checker
 .pyre/
 
-# Intellij Idea
+# JetBrains
 .idea/
 
 # python venv

commit 06a558fd8ceefe761043774df3df023155cdb991
Author: mattiacoll <64754556+mattiacoll@users.noreply.github.com>
Date:   Sun Jun 26 20:27:12 2022 +0200

    Added GET request to bot

diff --git a/softbots/views.py b/softbots/views.py
index 48d2f5b..7d972e8 100644
--- a/softbots/views.py
+++ b/softbots/views.py
@@ -1,11 +1,35 @@
-from django.http import HttpResponse, HttpResponseNotFound
+from django.http import HttpResponse, HttpResponseNotFound, JsonResponse
+import jsonpickle
 from .models import Bot, Node, Link
 from django.views.decorators.csrf import csrf_exempt
 from random import randrange
 import json
+from django.core import serializers
+
+def encodeBot( bot ) -> str:
+    jsonSer = serializers.serialize('json', [ bot, ])
+    data = json.loads( jsonSer )
+
+    # Remove `pk` and `model` properties
+    for d in data:
+        del d['pk']
+        del d['model']
+
+    return json.dumps( data )
 
 @csrf_exempt
 def bot(request, bot_id=-1):
+    # Delete a bot
+    if request.method == "GET":
+        try:
+            bot = Bot.objects.get(bot_id=bot_id)
+        except Bot.DoesNotExist:
+            pass
+        else:
+            data = encodeBot( bot )
+            return JsonResponse( data, safe=False )
+        return HttpResponse()
+
     # Create a bot
     if request.method == "POST":
         bot_id = randrange(0, 10**9)
@@ -22,6 +46,7 @@ def bot(request, bot_id=-1):
         else:
             bot.delete()
         return HttpResponse()
+
     return HttpResponseNotFound()
 
 

commit ef8949be1183f8f6bd36dc7792ff7794cd0d7d51
Author: mattiacoll <64754556+mattiacoll@users.noreply.github.com>
Date:   Sun Jun 26 19:55:18 2022 +0200

    Updated models

diff --git a/softbots/migrations/0003_alter_link_link_bot_id_alter_link_link_node1_id_and_more.py b/softbots/migrations/0003_alter_link_link_bot_id_alter_link_link_node1_id_and_more.py
new file mode 100644
index 0000000..20293ac
--- /dev/null
+++ b/softbots/migrations/0003_alter_link_link_bot_id_alter_link_link_node1_id_and_more.py
@@ -0,0 +1,34 @@
+# Generated by Django 4.0.5 on 2022-06-26 17:50
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('softbots', '0002_bot_links_bot_nodes'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='link',
+            name='link_bot_id',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='softbots.bot'),
+        ),
+        migrations.AlterField(
+            model_name='link',
+            name='link_node1_id',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='node1_id', to='softbots.node'),
+        ),
+        migrations.AlterField(
+            model_name='link',
+            name='link_node2_id',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='node2_id', to='softbots.node'),
+        ),
+        migrations.AlterField(
+            model_name='node',
+            name='node_bot_id',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='softbots.bot'),
+        ),
+    ]
diff --git a/softbots/models.py b/softbots/models.py
index e435c82..79bc2e6 100644
--- a/softbots/models.py
+++ b/softbots/models.py
@@ -1,36 +1,28 @@
+from tkinter import CASCADE
 from django.db import models
 from django.contrib import admin
 
 class Node(models.Model):
-    node_bot_id = models.IntegerField()
+    node_bot_id = models.ForeignKey('Bot', on_delete=models.CASCADE)
     node_id = models.IntegerField()
     node_mass = models.FloatField()
     node_position_x = models.FloatField()
     node_position_y = models.FloatField()
 
-    def __str__(self) -> str:
-        return self.name
-
 class Link(models.Model):
-    link_bot_id = models.IntegerField()
+    link_bot_id = models.ForeignKey('Bot', on_delete=models.CASCADE)
     link_id = models.IntegerField()
-    link_node1_id = models.IntegerField()
-    link_node2_id = models.IntegerField()
+    link_node1_id = models.ForeignKey('Node', on_delete=models.CASCADE, related_name='node1_id')
+    link_node2_id = models.ForeignKey('Node', on_delete=models.CASCADE, related_name='node2_id')
     link_length = models.FloatField()
     link_stiffness = models.FloatField()
     link_dampening = models.FloatField()
 
-    def __str__(self) -> str:
-        return self.name
-
 class Bot(models.Model):
     bot_id = models.IntegerField()
     nodes = models.ManyToManyField(Node)
     links = models.ManyToManyField(Link)
 
-    def __str__(self) -> str:
-        return self.name
-
 admin.site.register(Bot)
 admin.site.register(Node)
 admin.site.register(Link)
\ No newline at end of file

commit 413e0fc5d9ac3cc8fcb135ddc1a089c19223bfb6
Author: mattiacoll <64754556+mattiacoll@users.noreply.github.com>
Date:   Sun Jun 26 19:53:54 2022 +0200

    Updated url/views for bots

diff --git a/softbots/urls.py b/softbots/urls.py
index 205643d..37724a3 100644
--- a/softbots/urls.py
+++ b/softbots/urls.py
@@ -3,8 +3,7 @@ from django.urls import path, re_path
 from . import views
 
 urlpatterns = [
-    re_path(r'^bot/?', views.bot_create),
-    re_path(r'^bot/(?P<bot_id>\d{9})/?', views.bot_access),
+    re_path(r'^bot/?(?P<bot_id>\d{9})?/?', views.bot, name='Bot'),
     re_path(r'^bot/(?P<bot_id>\d{9})/node/?', views.bot_node_create),
     re_path(r'^bot/(?P<bot_id>\d{9})/node/(?P<node_id>\d{9})/?', views.bot_node_access),
     re_path(r'^bot/(?P<bot_id>\d{9})/link/?', views.bot_link_create),
diff --git a/softbots/views.py b/softbots/views.py
index e7eb968..48d2f5b 100644
--- a/softbots/views.py
+++ b/softbots/views.py
@@ -4,17 +4,16 @@ from django.views.decorators.csrf import csrf_exempt
 from random import randrange
 import json
 
-
-def bot_create(request):
+@csrf_exempt
+def bot(request, bot_id=-1):
+    # Create a bot
     if request.method == "POST":
         bot_id = randrange(0, 10**9)
         bot = Bot(bot_id=bot_id)
         bot.save()
         return HttpResponse(json.dumps(bot_id), content_type="application/json")
-    return HttpResponseNotFound()
-
 
-def bot_access(request, bot_id):
+    # Delete a bot
     if request.method == "DELETE":
         try:
             bot = Bot.objects.get(bot_id=bot_id)

commit 98f57b0dcb2b9bcdae09eedd44bc7ae4a0d2b5e8
Author: mattiacoll <64754556+mattiacoll@users.noreply.github.com>
Date:   Sun Jun 26 19:34:35 2022 +0200

    Added vscode debugging

diff --git a/.vscode/launch.json b/.vscode/launch.json
new file mode 100644
index 0000000..5ce045b
--- /dev/null
+++ b/.vscode/launch.json
@@ -0,0 +1,20 @@
+{
+  // Use IntelliSense to learn about possible attributes.
+  // Hover to view descriptions of existing attributes.
+  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
+  "version": "0.2.0",
+  "configurations": [
+    {
+      "name": "Python: Django",
+      "type": "python",
+      "request": "launch",
+      "program": "${workspaceFolder}/manage.py",
+      "args": [
+        "runserver",
+        "8080"
+      ],
+      "django": true,
+      "justMyCode": true
+    }
+  ]
+}
\ No newline at end of file

commit d51a55dc377a834ba1580abbf01b36747e32d4d5
Author: mattiacoll <64754556+mattiacoll@users.noreply.github.com>
Date:   Sun Jun 26 18:50:56 2022 +0200

    Added migrations

diff --git a/readme.md b/readme.md
index 0a6329a..8339f6b 100644
--- a/readme.md
+++ b/readme.md
@@ -1,5 +1,19 @@
 # Run db migrations
+```sh
 python manage.py migrate --run-syncdb
+````
 
 # Start django server
-python manage.py runserver
\ No newline at end of file
+```sh
+python manage.py runserver
+````
+
+# Add Migrations
+```sh
+python manage.py makemigrations softbots
+````
+
+# Run migrations
+```sh
+python manage.py migrate
+````
\ No newline at end of file
diff --git a/softbots/migrations/0001_initial.py b/softbots/migrations/0001_initial.py
new file mode 100644
index 0000000..e9a3fca
--- /dev/null
+++ b/softbots/migrations/0001_initial.py
@@ -0,0 +1,45 @@
+# Generated by Django 4.0.5 on 2022-06-26 16:42
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Bot',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('bot_id', models.IntegerField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Link',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('link_bot_id', models.IntegerField()),
+                ('link_id', models.IntegerField()),
+                ('link_node1_id', models.IntegerField()),
+                ('link_node2_id', models.IntegerField()),
+                ('link_length', models.FloatField()),
+                ('link_stiffness', models.FloatField()),
+                ('link_dampening', models.FloatField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Node',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('node_bot_id', models.IntegerField()),
+                ('node_id', models.IntegerField()),
+                ('node_mass', models.FloatField()),
+                ('node_position_x', models.FloatField()),
+                ('node_position_y', models.FloatField()),
+            ],
+        ),
+    ]
diff --git a/softbots/migrations/0002_bot_links_bot_nodes.py b/softbots/migrations/0002_bot_links_bot_nodes.py
new file mode 100644
index 0000000..bcd93cb
--- /dev/null
+++ b/softbots/migrations/0002_bot_links_bot_nodes.py
@@ -0,0 +1,23 @@
+# Generated by Django 4.0.5 on 2022-06-26 16:43
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('softbots', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='bot',
+            name='links',
+            field=models.ManyToManyField(to='softbots.link'),
+        ),
+        migrations.AddField(
+            model_name='bot',
+            name='nodes',
+            field=models.ManyToManyField(to='softbots.node'),
+        ),
+    ]
diff --git a/softbots/migrations/__init__.py b/softbots/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/softbots/models.py b/softbots/models.py
index eb3a8b1..e435c82 100644
--- a/softbots/models.py
+++ b/softbots/models.py
@@ -1,11 +1,6 @@
 from django.db import models
 from django.contrib import admin
 
-
-class Bot(models.Model):
-    bot_id = models.IntegerField()
-
-
 class Node(models.Model):
     node_bot_id = models.IntegerField()
     node_id = models.IntegerField()
@@ -13,6 +8,8 @@ class Node(models.Model):
     node_position_x = models.FloatField()
     node_position_y = models.FloatField()
 
+    def __str__(self) -> str:
+        return self.name
 
 class Link(models.Model):
     link_bot_id = models.IntegerField()
@@ -23,6 +20,17 @@ class Link(models.Model):
     link_stiffness = models.FloatField()
     link_dampening = models.FloatField()
 
+    def __str__(self) -> str:
+        return self.name
+
+class Bot(models.Model):
+    bot_id = models.IntegerField()
+    nodes = models.ManyToManyField(Node)
+    links = models.ManyToManyField(Link)
+
+    def __str__(self) -> str:
+        return self.name
+
 admin.site.register(Bot)
 admin.site.register(Node)
 admin.site.register(Link)
\ No newline at end of file

commit 27e1cf673f8faa88acc4fe2e385f061089d63fd6
Author: mattiacoll <64754556+mattiacoll@users.noreply.github.com>
Date:   Fri Jun 24 22:18:33 2022 +0200

    Updated regex for optional trailing /

diff --git a/softbots/urls.py b/softbots/urls.py
index 05cdef0..205643d 100644
--- a/softbots/urls.py
+++ b/softbots/urls.py
@@ -3,13 +3,13 @@ from django.urls import path, re_path
 from . import views
 
 urlpatterns = [
-    path('bot/', views.bot_create),
-    re_path(r'^bot/(?P<bot_id>\d{9})/', views.bot_access),
-    re_path(r'^bot/(?P<bot_id>\d{9})/node/', views.bot_node_create),
-    re_path(r'^bot/(?P<bot_id>\d{9})/node/(?P<node_id>\d{9})/', views.bot_node_access),
-    re_path(r'^bot/(?P<bot_id>\d{9})/link/', views.bot_link_create),
-    re_path(r'^bot/(?P<bot_id>\d{9})/link/(?P<node_id>\d{9})/', views.bot_link_access),
-    re_path(r'^bot/(?P<bot_id>\d{9})/model/(?P<node_id>\d{9})/', views.bot_model_create),
-    re_path(r'^bot/(?P<bot_id>\d{9})/model/(?P<node_id>\d{9})/', views.bot_model_access),
+    re_path(r'^bot/?', views.bot_create),
+    re_path(r'^bot/(?P<bot_id>\d{9})/?', views.bot_access),
+    re_path(r'^bot/(?P<bot_id>\d{9})/node/?', views.bot_node_create),
+    re_path(r'^bot/(?P<bot_id>\d{9})/node/(?P<node_id>\d{9})/?', views.bot_node_access),
+    re_path(r'^bot/(?P<bot_id>\d{9})/link/?', views.bot_link_create),
+    re_path(r'^bot/(?P<bot_id>\d{9})/link/(?P<node_id>\d{9})/?', views.bot_link_access),
+    re_path(r'^bot/(?P<bot_id>\d{9})/model/(?P<node_id>\d{9})/?', views.bot_model_create),
+    re_path(r'^bot/(?P<bot_id>\d{9})/model/(?P<node_id>\d{9})/?', views.bot_model_access),
     path('admin/', admin.site.urls),
 ]

commit fe72aa9b7cfc2ccfefcdf250a8c47e0313eff98f
Author: mattiacoll <64754556+mattiacoll@users.noreply.github.com>
Date:   Fri Jun 24 22:17:56 2022 +0200

    Added readme to start server and create db

diff --git a/readme.md b/readme.md
new file mode 100644
index 0000000..0a6329a
--- /dev/null
+++ b/readme.md
@@ -0,0 +1,5 @@
+# Run db migrations
+python manage.py migrate --run-syncdb
+
+# Start django server
+python manage.py runserver
\ No newline at end of file

commit 11c83efef05c78b9bcfef9f5305f3e3ab23296ee
Author: mattiacoll <64754556+mattiacoll@users.noreply.github.com>
Date:   Fri Jun 24 20:54:49 2022 +0200

    Added requirements.txt

diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..70a3f93
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1,4 @@
+asgiref==3.5.2
+Django==4.0.5
+jsonpickle==2.2.0
+sqlparse==0.4.2

commit 05654c5c8c049ccc2e6bddc42f6a847193a921fd
Author: mattiacoll <64754556+mattiacoll@users.noreply.github.com>
Date:   Sat Jun 18 15:21:26 2022 +0200

    Updated .gitignore and removed .idea dir

diff --git a/.gitignore b/.gitignore
index 7e25864..55361f7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -128,5 +128,11 @@ dmypy.json
 # Pyre type checker
 .pyre/
 
-# JetBrains
+# Intellij Idea
 .idea/
+
+# python venv
+bin/
+lib64/
+lib64
+pyvenv.cfg

commit 900a114089e956013a8e2a89386aea9e0c9347d5
Author: mattiacoll <64754556+mattiacoll@users.noreply.github.com>
Date:   Sat Jun 18 15:19:26 2022 +0200

    Added .editorconfig

diff --git a/.editorconfig b/.editorconfig
new file mode 100644
index 0000000..e948f31
--- /dev/null
+++ b/.editorconfig
@@ -0,0 +1,8 @@
+[*]
+indent_style = space
+
+[*.{py,txt}]
+tab_width = 4
+
+[*.{js,html}]
+tab_width = 2
\ No newline at end of file

commit 1501b01652d60c14f4237f3ae7b5a80acdd6c82a
Author: Elias Dobrin <elias@dobrin.net>
Date:   Thu Jun 23 22:10:54 2022 -0700

    working on bot_node_create lots of (naming needed to fix)

diff --git a/softbots/views.py b/softbots/views.py
index 633f084..e7eb968 100644
--- a/softbots/views.py
+++ b/softbots/views.py
@@ -26,8 +26,15 @@ def bot_access(request, bot_id):
     return HttpResponseNotFound()
 
 
-def bot_node_create(request):
-    return HttpResponse("Bot Node Init")
+def bot_node_create(request, bot_id):
+    if request.method == "POST":
+        try:
+            bot = Bot.objects.get(bot_id=bot_id)
+        except Bot.DoesNotExist:
+            pass
+        else:
+            pass # working on this
+    return HttpResponseNotFound()
 
 
 def bot_node_access(request, node_id):

commit c01a9f4d19323ce463848fe7e24e928d695d7101
Author: Elias Dobrin <elias@dobrin.net>
Date:   Thu Jun 23 21:59:24 2022 -0700

    made bot_access method to delete a bot with id

diff --git a/softbots/models.py b/softbots/models.py
index 02380d1..eb3a8b1 100644
--- a/softbots/models.py
+++ b/softbots/models.py
@@ -1,4 +1,5 @@
 from django.db import models
+from django.contrib import admin
 
 
 class Bot(models.Model):
@@ -21,3 +22,7 @@ class Link(models.Model):
     link_length = models.FloatField()
     link_stiffness = models.FloatField()
     link_dampening = models.FloatField()
+
+admin.site.register(Bot)
+admin.site.register(Node)
+admin.site.register(Link)
\ No newline at end of file
diff --git a/softbots/urls.py b/softbots/urls.py
index aeef2c4..05cdef0 100644
--- a/softbots/urls.py
+++ b/softbots/urls.py
@@ -1,13 +1,15 @@
+from django.contrib import admin
 from django.urls import path, re_path
 from . import views
 
 urlpatterns = [
-    path('bot', views.bot_init),
-    re_path(r'^bot/(?P<bid>\d{9})/$', views.bot_access),
-    re_path(r'^bot/(?P<bid>\d{9})/$/node', views.bot_node_init),
-    re_path(r'^bot/(?P<bid>\d{9})/$/node/(?P<nid>\d{9})', views.bot_node_access),
-    re_path(r'^bot/(?P<bid>\d{9})/$/link', views.bot_link_init),
-    re_path(r'^bot/(?P<bid>\d{9})/$/link/(?P<nid>\d{9})', views.bot_link_access),
-    re_path(r'^bot/(?P<bid>\d{9})/$/model/(?P<nid>\d{9})', views.bot_model_init),
-    re_path(r'^bot/(?P<bid>\d{9})/$/model/(?P<nid>\d{9})', views.bot_model_access),
+    path('bot/', views.bot_create),
+    re_path(r'^bot/(?P<bot_id>\d{9})/', views.bot_access),
+    re_path(r'^bot/(?P<bot_id>\d{9})/node/', views.bot_node_create),
+    re_path(r'^bot/(?P<bot_id>\d{9})/node/(?P<node_id>\d{9})/', views.bot_node_access),
+    re_path(r'^bot/(?P<bot_id>\d{9})/link/', views.bot_link_create),
+    re_path(r'^bot/(?P<bot_id>\d{9})/link/(?P<node_id>\d{9})/', views.bot_link_access),
+    re_path(r'^bot/(?P<bot_id>\d{9})/model/(?P<node_id>\d{9})/', views.bot_model_create),
+    re_path(r'^bot/(?P<bot_id>\d{9})/model/(?P<node_id>\d{9})/', views.bot_model_access),
+    path('admin/', admin.site.urls),
 ]
diff --git a/softbots/views.py b/softbots/views.py
index b9e16d3..633f084 100644
--- a/softbots/views.py
+++ b/softbots/views.py
@@ -5,24 +5,28 @@ from random import randrange
 import json
 
 
-@csrf_exempt
-def bot_init(request):
+def bot_create(request):
     if request.method == "POST":
         bot_id = randrange(0, 10**9)
         bot = Bot(bot_id=bot_id)
         bot.save()
         return HttpResponse(json.dumps(bot_id), content_type="application/json")
-    else:
-        return HttpResponseNotFound()
+    return HttpResponseNotFound()
 
 
-@csrf_exempt
 def bot_access(request, bot_id):
-
-    return HttpResponse("Bot")
-
-
-def bot_node_init(request):
+    if request.method == "DELETE":
+        try:
+            bot = Bot.objects.get(bot_id=bot_id)
+        except Bot.DoesNotExist:
+            pass
+        else:
+            bot.delete()
+        return HttpResponse()
+    return HttpResponseNotFound()
+
+
+def bot_node_create(request):
     return HttpResponse("Bot Node Init")
 
 
@@ -30,7 +34,7 @@ def bot_node_access(request, node_id):
     return HttpResponse("Bot Node")
 
 
-def bot_link_init(request):
+def bot_link_create(request):
     return HttpResponse("Bot Link Init")
 
 
@@ -38,7 +42,7 @@ def bot_link_access(request, link_id):
     return HttpResponse("Bot Link")
 
 
-def bot_model_init(request):
+def bot_model_create(request):
     return HttpResponse("Bot Model Init")
 
 

commit 4f586aee2a49ef4665ae1155d5c5300a607d714e
Author: Elias Dobrin <elias@dobrin.net>
Date:   Thu Jun 23 21:24:41 2022 -0700

    fixed models and views for bot_init method

diff --git a/softbots/models.py b/softbots/models.py
index 2581e63..02380d1 100644
--- a/softbots/models.py
+++ b/softbots/models.py
@@ -6,7 +6,7 @@ class Bot(models.Model):
 
 
 class Node(models.Model):
-    node_bot = models.ForeignKey(Bot, on_delete=models.CASCADE)
+    node_bot_id = models.IntegerField()
     node_id = models.IntegerField()
     node_mass = models.FloatField()
     node_position_x = models.FloatField()
@@ -14,10 +14,10 @@ class Node(models.Model):
 
 
 class Link(models.Model):
-    link_bot = models.ForeignKey(Bot, on_delete=models.CASCADE)
+    link_bot_id = models.IntegerField()
     link_id = models.IntegerField()
-    link_node_1 = models.ForeignKey(Node, on_delete=models.CASCADE)
-    link_node_2 = models.ForeignKey(Node, on_delete=models.CASCADE)
+    link_node1_id = models.IntegerField()
+    link_node2_id = models.IntegerField()
     link_length = models.FloatField()
     link_stiffness = models.FloatField()
     link_dampening = models.FloatField()
diff --git a/softbots/urls.py b/softbots/urls.py
index c27c072..aeef2c4 100644
--- a/softbots/urls.py
+++ b/softbots/urls.py
@@ -3,11 +3,11 @@ from . import views
 
 urlpatterns = [
     path('bot', views.bot_init),
-    re_path(r'^bot/(?P<bid>\d{9})/$', views.bot),
+    re_path(r'^bot/(?P<bid>\d{9})/$', views.bot_access),
     re_path(r'^bot/(?P<bid>\d{9})/$/node', views.bot_node_init),
-    re_path(r'^bot/(?P<bid>\d{9})/$/node/(?P<nid>\d{9})', views.bot_node),
+    re_path(r'^bot/(?P<bid>\d{9})/$/node/(?P<nid>\d{9})', views.bot_node_access),
     re_path(r'^bot/(?P<bid>\d{9})/$/link', views.bot_link_init),
-    re_path(r'^bot/(?P<bid>\d{9})/$/link/(?P<nid>\d{9})', views.bot_link),
+    re_path(r'^bot/(?P<bid>\d{9})/$/link/(?P<nid>\d{9})', views.bot_link_access),
     re_path(r'^bot/(?P<bid>\d{9})/$/model/(?P<nid>\d{9})', views.bot_model_init),
-    re_path(r'^bot/(?P<bid>\d{9})/$/model/(?P<nid>\d{9})', views.bot_model),
+    re_path(r'^bot/(?P<bid>\d{9})/$/model/(?P<nid>\d{9})', views.bot_model_access),
 ]
diff --git a/softbots/views.py b/softbots/views.py
index 06b5a49..b9e16d3 100644
--- a/softbots/views.py
+++ b/softbots/views.py
@@ -1,19 +1,24 @@
 from django.http import HttpResponse, HttpResponseNotFound
 from .models import Bot, Node, Link
 from django.views.decorators.csrf import csrf_exempt
-from random import randint
+from random import randrange
+import json
 
 
 @csrf_exempt
 def bot_init(request):
-    if request.method == 'POST':
-        bot_id = randint(0, 999999999)
-        return HttpResponse("Bot Init" + str(bot_id))
+    if request.method == "POST":
+        bot_id = randrange(0, 10**9)
+        bot = Bot(bot_id=bot_id)
+        bot.save()
+        return HttpResponse(json.dumps(bot_id), content_type="application/json")
     else:
         return HttpResponseNotFound()
 
 
-def bot(request, bot_id):
+@csrf_exempt
+def bot_access(request, bot_id):
+
     return HttpResponse("Bot")
 
 
@@ -21,7 +26,7 @@ def bot_node_init(request):
     return HttpResponse("Bot Node Init")
 
 
-def bot_node(request, node_id):
+def bot_node_access(request, node_id):
     return HttpResponse("Bot Node")
 
 
@@ -29,7 +34,7 @@ def bot_link_init(request):
     return HttpResponse("Bot Link Init")
 
 
-def bot_link(request, link_id):
+def bot_link_access(request, link_id):
     return HttpResponse("Bot Link")
 
 
@@ -37,5 +42,5 @@ def bot_model_init(request):
     return HttpResponse("Bot Model Init")
 
 
-def bot_model(request, model_id):
+def bot_model_access(request, model_id):
     return HttpResponse("Bot Model")

commit fcc04763b13edca87383850f86dbef775b598920
Author: Elias <elias@dobrin.net>
Date:   Wed Jun 22 21:07:18 2022 -0700

    updated models

diff --git a/.gitignore b/.gitignore
index 3efd499..7e25864 100644
--- a/.gitignore
+++ b/.gitignore
@@ -128,5 +128,5 @@ dmypy.json
 # Pyre type checker
 .pyre/
 
-# IDE
+# JetBrains
 .idea/
diff --git a/softbots/models.py b/softbots/models.py
index 73848d6..2581e63 100644
--- a/softbots/models.py
+++ b/softbots/models.py
@@ -2,20 +2,22 @@ from django.db import models
 
 
 class Bot(models.Model):
-    id = models.IntegerField()
+    bot_id = models.IntegerField()
 
 
 class Node(models.Model):
-    id = models.IntegerField()
-    mass = models.FloatField()
-    position_x = models.FloatField()
-    position_y = models.FloatField()
+    node_bot = models.ForeignKey(Bot, on_delete=models.CASCADE)
+    node_id = models.IntegerField()
+    node_mass = models.FloatField()
+    node_position_x = models.FloatField()
+    node_position_y = models.FloatField()
 
 
 class Link(models.Model):
-    id = models.IntegerField()
-    node_1 = models.ForeignKey(Node, on_delete=models.CASCADE)
-    node_2 = models.ForeignKey(Node, on_delete=models.CASCADE)
-    length = models.FloatField()
-    stiffness = models.FloatField()
-    dampening = models.FloatField()
+    link_bot = models.ForeignKey(Bot, on_delete=models.CASCADE)
+    link_id = models.IntegerField()
+    link_node_1 = models.ForeignKey(Node, on_delete=models.CASCADE)
+    link_node_2 = models.ForeignKey(Node, on_delete=models.CASCADE)
+    link_length = models.FloatField()
+    link_stiffness = models.FloatField()
+    link_dampening = models.FloatField()
diff --git a/softbots/settings.py b/softbots/settings.py
index 4eb9707..930761f 100644
--- a/softbots/settings.py
+++ b/softbots/settings.py
@@ -31,6 +31,7 @@ ALLOWED_HOSTS = []
 # Application definition
 
 INSTALLED_APPS = [
+    'softbots',
     'django.contrib.admin',
     'django.contrib.auth',
     'django.contrib.contenttypes',
diff --git a/softbots/views.py b/softbots/views.py
index 8b71a7e..06b5a49 100644
--- a/softbots/views.py
+++ b/softbots/views.py
@@ -1,9 +1,14 @@
 from django.http import HttpResponse, HttpResponseNotFound
+from .models import Bot, Node, Link
+from django.views.decorators.csrf import csrf_exempt
+from random import randint
 
 
+@csrf_exempt
 def bot_init(request):
     if request.method == 'POST':
-        return HttpResponse("Bot Init")
+        bot_id = randint(0, 999999999)
+        return HttpResponse("Bot Init" + str(bot_id))
     else:
         return HttpResponseNotFound()
 

commit ff7327bed889cca8b71d16845ddfb56804f11d06
Author: Daxonus <elias@dobrin.net>
Date:   Wed Jun 22 11:47:26 2022 -0700

    added models

diff --git a/softbots/models.py b/softbots/models.py
new file mode 100644
index 0000000..73848d6
--- /dev/null
+++ b/softbots/models.py
@@ -0,0 +1,21 @@
+from django.db import models
+
+
+class Bot(models.Model):
+    id = models.IntegerField()
+
+
+class Node(models.Model):
+    id = models.IntegerField()
+    mass = models.FloatField()
+    position_x = models.FloatField()
+    position_y = models.FloatField()
+
+
+class Link(models.Model):
+    id = models.IntegerField()
+    node_1 = models.ForeignKey(Node, on_delete=models.CASCADE)
+    node_2 = models.ForeignKey(Node, on_delete=models.CASCADE)
+    length = models.FloatField()
+    stiffness = models.FloatField()
+    dampening = models.FloatField()
diff --git a/softbots/urls.py b/softbots/urls.py
index ab2be90..c27c072 100644
--- a/softbots/urls.py
+++ b/softbots/urls.py
@@ -1,30 +1,13 @@
-"""softbots URL Configuration
-
-The `urlpatterns` list routes URLs to views. For more information please see:
-    https://docs.djangoproject.com/en/4.0/topics/http/urls/
-Examples:
-Function views
-    1. Add an import:  from my_app import views
-    2. Add a URL to urlpatterns:  path('', views.home, name='home')
-Class-based views
-    1. Add an import:  from other_app.views import Home
-    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
-Including another URLconf
-    1. Import the include() function: from django.urls import include, path
-    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
-"""
-from django.contrib import admin
 from django.urls import path, re_path
 from . import views
 
 urlpatterns = [
     path('bot', views.bot_init),
-    re_path(r'^bot/(?P<bid>b\d{9})/$', views.bot),
-    re_path(r'^bot/(?P<bid>b\d{9})/$/node', views.bot_node_init),
-    re_path(r'^bot/(?P<bid>b\d{9})/$/node/(?P<nid>n\d{9})', views.bot_node),
-    re_path(r'^bot/(?P<bid>b\d{9})/$/link', views.bot_link_init),
-    re_path(r'^bot/(?P<bid>b\d{9})/$/link/(?P<nid>l\d{9})', views.bot_link),
-    re_path(r'^bot/(?P<bid>b\d{9})/$/model/(?P<nid>m\d{9})', views.bot_model_init),
-    re_path(r'^bot/(?P<bid>b\d{9})/$/model/(?P<nid>m\d{9})', views.bot_model),
-    path('admin/', admin.site.urls),
+    re_path(r'^bot/(?P<bid>\d{9})/$', views.bot),
+    re_path(r'^bot/(?P<bid>\d{9})/$/node', views.bot_node_init),
+    re_path(r'^bot/(?P<bid>\d{9})/$/node/(?P<nid>\d{9})', views.bot_node),
+    re_path(r'^bot/(?P<bid>\d{9})/$/link', views.bot_link_init),
+    re_path(r'^bot/(?P<bid>\d{9})/$/link/(?P<nid>\d{9})', views.bot_link),
+    re_path(r'^bot/(?P<bid>\d{9})/$/model/(?P<nid>\d{9})', views.bot_model_init),
+    re_path(r'^bot/(?P<bid>\d{9})/$/model/(?P<nid>\d{9})', views.bot_model),
 ]
diff --git a/softbots/views.py b/softbots/views.py
index 31b72fb..8b71a7e 100644
--- a/softbots/views.py
+++ b/softbots/views.py
@@ -8,7 +8,7 @@ def bot_init(request):
         return HttpResponseNotFound()
 
 
-def bot(request, bid):
+def bot(request, bot_id):
     return HttpResponse("Bot")
 
 
@@ -16,7 +16,7 @@ def bot_node_init(request):
     return HttpResponse("Bot Node Init")
 
 
-def bot_node(request, nid):
+def bot_node(request, node_id):
     return HttpResponse("Bot Node")
 
 
@@ -24,7 +24,7 @@ def bot_link_init(request):
     return HttpResponse("Bot Link Init")
 
 
-def bot_link(request, lid):
+def bot_link(request, link_id):
     return HttpResponse("Bot Link")
 
 
@@ -32,5 +32,5 @@ def bot_model_init(request):
     return HttpResponse("Bot Model Init")
 
 
-def bot_model(request, mid):
+def bot_model(request, model_id):
     return HttpResponse("Bot Model")

commit ecf421678cfe889c52e3d0789bfaead3e1bcc4c2
Author: Elias Dobrin <elias@dobrin.net>
Date:   Sun Jun 19 19:12:55 2022 -0700

    updated ids in service.txt

diff --git a/service.txt b/service.txt
index c8aa5be..da44c7a 100644
--- a/service.txt
+++ b/service.txt
@@ -38,19 +38,21 @@ as well as the bot id of the current model. As well as the pytorch saved model.
 
 softbots/
   bots/
-    BKLGKJSB/
-      bot.json
-    BSLWTKDL/
-      bot.json
-    BNHJLZYG/
-      bot.json
-  models/
-    MFAALWPP/
-      model.json
-      model.pt
-    MWQOEOWP/
-      model.json
-      model.pt
-    MNVBCNDM/
-      model.json
-      model.pt
+    B098324232/
+      nodes/
+        N120938235
+      links/
+        L140983244
+      models/
+        M123902355/
+          model.json
+          model.pt
+        M143209832/
+          model.json
+          model.pt
+    B235987425/
+      nodes/
+        N130928423
+    B129304832/
+      nodes/
+        N120981340

commit 7dd523c1fc82ea1b80f9e1e62bf561ef10d9d8d6
Author: Elias Dobrin <elias@dobrin.net>
Date:   Sun Jun 19 19:05:59 2022 -0700

    updated django project views and urls

diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000..4041fe6
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'softbots.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/softbots/__init__.py b/softbots/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/softbots/asgi.py b/softbots/asgi.py
new file mode 100644
index 0000000..597850f
--- /dev/null
+++ b/softbots/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for softbots project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.0/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'softbots.settings')
+
+application = get_asgi_application()
diff --git a/softbots/settings.py b/softbots/settings.py
new file mode 100644
index 0000000..4eb9707
--- /dev/null
+++ b/softbots/settings.py
@@ -0,0 +1,123 @@
+"""
+Django settings for softbots project.
+
+Generated by 'django-admin startproject' using Django 4.0.5.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.0/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/4.0/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-tbfldr1m^e9o26@*us9y2jm+)v$5yz0i@x0jkcgz6-2%h(e(fy'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'softbots.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'softbots.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/4.0/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/4.0/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/softbots/urls.py b/softbots/urls.py
new file mode 100644
index 0000000..ab2be90
--- /dev/null
+++ b/softbots/urls.py
@@ -0,0 +1,30 @@
+"""softbots URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/4.0/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path, re_path
+from . import views
+
+urlpatterns = [
+    path('bot', views.bot_init),
+    re_path(r'^bot/(?P<bid>b\d{9})/$', views.bot),
+    re_path(r'^bot/(?P<bid>b\d{9})/$/node', views.bot_node_init),
+    re_path(r'^bot/(?P<bid>b\d{9})/$/node/(?P<nid>n\d{9})', views.bot_node),
+    re_path(r'^bot/(?P<bid>b\d{9})/$/link', views.bot_link_init),
+    re_path(r'^bot/(?P<bid>b\d{9})/$/link/(?P<nid>l\d{9})', views.bot_link),
+    re_path(r'^bot/(?P<bid>b\d{9})/$/model/(?P<nid>m\d{9})', views.bot_model_init),
+    re_path(r'^bot/(?P<bid>b\d{9})/$/model/(?P<nid>m\d{9})', views.bot_model),
+    path('admin/', admin.site.urls),
+]
diff --git a/softbots/views.py b/softbots/views.py
new file mode 100644
index 0000000..31b72fb
--- /dev/null
+++ b/softbots/views.py
@@ -0,0 +1,36 @@
+from django.http import HttpResponse, HttpResponseNotFound
+
+
+def bot_init(request):
+    if request.method == 'POST':
+        return HttpResponse("Bot Init")
+    else:
+        return HttpResponseNotFound()
+
+
+def bot(request, bid):
+    return HttpResponse("Bot")
+
+
+def bot_node_init(request):
+    return HttpResponse("Bot Node Init")
+
+
+def bot_node(request, nid):
+    return HttpResponse("Bot Node")
+
+
+def bot_link_init(request):
+    return HttpResponse("Bot Link Init")
+
+
+def bot_link(request, lid):
+    return HttpResponse("Bot Link")
+
+
+def bot_model_init(request):
+    return HttpResponse("Bot Model Init")
+
+
+def bot_model(request, mid):
+    return HttpResponse("Bot Model")
diff --git a/softbots/wsgi.py b/softbots/wsgi.py
new file mode 100644
index 0000000..663bd4c
--- /dev/null
+++ b/softbots/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for softbots project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.0/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'softbots.settings')
+
+application = get_wsgi_application()

commit 5c5edb552f90b194059ccd11afcf4a3bc7969a21
Author: Elias Dobrin <elias@dobrin.net>
Date:   Sun Jun 19 19:05:39 2022 -0700

    updated service.txt

diff --git a/service.txt b/service.txt
index 0a6d7c4..c8aa5be 100644
--- a/service.txt
+++ b/service.txt
@@ -25,10 +25,10 @@ POST    softbots/bot/:bid/link?n1&n2&l&s&d
 PUT     softbots/bot/:bid/link/:lid?n1&n2&l&s&d
 GET     softbots/bot/:bid/link/:lid
 DELETE  softbots/bot/:bid/link/:lid
-POST    softbots/model/:bid - To create a model and return the mid.
-PUT     softbots/model/:mid?lr - To train and save a model with mid and input of training parameters.
-GET     softbots/model/:mid - To get a model with mid.
-DELETE  softbots/model/:mid - To delete a bot with mid.
+POST    softbots/bot/:bid/model - To create a model and return the mid.
+PUT     softbots/bot/:bid/model/:mid?lr - To train and save a model with mid and input of training parameters.
+GET     softbots/bot/:bid/model/:mid - To get a model with mid.
+DELETE  softbots/bot/:bid/model/:mid - To delete a bot with mid.
 
 STORAGE
 =======

commit bd6006496750fdb1ae78daab6273847ed47d2f18
Author: Elias <elias@dobrin.net>
Date:   Sat Jun 18 13:42:15 2022 -0700

    added node and link endpoints to service.txt

diff --git a/service.txt b/service.txt
index 320a502..0a6d7c4 100644
--- a/service.txt
+++ b/service.txt
@@ -14,13 +14,19 @@ Significance of input neurons should not change with terrain change.
 
 API
 ===
-POST    softbots/bot - To create a bot with JSON input of nodes and links and return the bid.
-GET     softbots/bot - Redirect to softbots/bots.
+POST    softbots/bot - To create a bot and return the bid.
 GET     softbots/bot/:bid - To get a bot with bid.
 DELETE  softbots/bot/:bid - To delete a bot with bid and associated models.
-POST    softbots/model/:bid - To create a model with JSON input and return the mid.
-PUT     softbots/model/:mid - To train and save a model with mid and JSON input of training parameters.
-GET     softbots/model - Redirect to softbots/models.
+POST    softbots/bot/:bid/node?m&x&y
+PUT     softbots/bot/:bid/node/:nid?m&x&y
+GET     softbots/bot/:bid/node/:nid
+DELETE  softbots/bot/:bid/node/:nid
+POST    softbots/bot/:bid/link?n1&n2&l&s&d
+PUT     softbots/bot/:bid/link/:lid?n1&n2&l&s&d
+GET     softbots/bot/:bid/link/:lid
+DELETE  softbots/bot/:bid/link/:lid
+POST    softbots/model/:bid - To create a model and return the mid.
+PUT     softbots/model/:mid?lr - To train and save a model with mid and input of training parameters.
 GET     softbots/model/:mid - To get a model with mid.
 DELETE  softbots/model/:mid - To delete a bot with mid.
 

commit 55b3846f3fffeafe6fb0681d43fe598d0066abe3
Author: Elias Dobrin <elias@dobrin.net>
Date:   Sat Jun 18 11:45:59 2022 -0700

    updated service.txt

diff --git a/.gitignore b/.gitignore
index b6e4761..3efd499 100644
--- a/.gitignore
+++ b/.gitignore
@@ -127,3 +127,6 @@ dmypy.json
 
 # Pyre type checker
 .pyre/
+
+# IDE
+.idea/
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
deleted file mode 100644
index 5101a59..0000000
--- a/.idea/inspectionProfiles/Project_Default.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <profile version="1.0">
-    <option name="myName" value="Project Default" />
-    <inspection_tool class="HtmlUnknownTag" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="myValues">
-        <value>
-          <list size="7">
-            <item index="0" class="java.lang.String" itemvalue="nobr" />
-            <item index="1" class="java.lang.String" itemvalue="noembed" />
-            <item index="2" class="java.lang.String" itemvalue="comment" />
-            <item index="3" class="java.lang.String" itemvalue="noscript" />
-            <item index="4" class="java.lang.String" itemvalue="embed" />
-            <item index="5" class="java.lang.String" itemvalue="script" />
-            <item index="6" class="java.lang.String" itemvalue="style" />
-          </list>
-        </value>
-      </option>
-      <option name="myCustomValuesEnabled" value="true" />
-    </inspection_tool>
-    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="ignoredPackages">
-        <value>
-          <list size="2">
-            <item index="0" class="java.lang.String" itemvalue="mazelib" />
-            <item index="1" class="java.lang.String" itemvalue="euclid" />
-          </list>
-        </value>
-      </option>
-    </inspection_tool>
-  </profile>
-</component>
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
deleted file mode 100644
index 105ce2d..0000000
--- a/.idea/inspectionProfiles/profiles_settings.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <settings>
-    <option name="USE_PROJECT_PROFILE" value="false" />
-    <version value="1.0" />
-  </settings>
-</component>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
index dc9ea49..0000000
--- a/.idea/misc.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
-</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
deleted file mode 100644
index 0609e15..0000000
--- a/.idea/modules.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/softbots.iml" filepath="$PROJECT_DIR$/.idea/softbots.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
diff --git a/.idea/softbots.iml b/.idea/softbots.iml
deleted file mode 100644
index fa7a615..0000000
--- a/.idea/softbots.iml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="PYTHON_MODULE" version="4">
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-  <component name="PyDocumentationSettings">
-    <option name="format" value="PLAIN" />
-    <option name="myDocStringFormat" value="Plain" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
index 94a25f7..0000000
--- a/.idea/vcs.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
deleted file mode 100644
index 92e3c10..0000000
--- a/.idea/workspace.xml
+++ /dev/null
@@ -1,130 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="AutoImportSettings">
-    <option name="autoReloadType" value="SELECTIVE" />
-  </component>
-  <component name="ChangeListManager">
-    <list default="true" id="dd83d79d-de36-4117-9c55-4dac2b433a09" name="Changes" comment="working on rendering">
-      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/output.mp4" beforeDir="false" afterPath="$PROJECT_DIR$/output.mp4" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/softbots.py" beforeDir="false" afterPath="$PROJECT_DIR$/softbots.py" afterDir="false" />
-    </list>
-    <option name="SHOW_DIALOG" value="false" />
-    <option name="HIGHLIGHT_CONFLICTS" value="true" />
-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-    <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="FileTemplateManagerImpl">
-    <option name="RECENT_TEMPLATES">
-      <list>
-        <option value="Python Script" />
-      </list>
-    </option>
-  </component>
-  <component name="Git.Settings">
-    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-  </component>
-  <component name="MarkdownSettingsMigration">
-    <option name="stateVersion" value="1" />
-  </component>
-  <component name="ProjectId" id="2AiGyKiQjYn1JAOeVBPqYarbIaf" />
-  <component name="ProjectLevelVcsManager">
-    <ConfirmationsSetting value="2" id="Add" />
-  </component>
-  <component name="ProjectViewState">
-    <option name="hideEmptyMiddlePackages" value="true" />
-    <option name="showLibraryContents" value="true" />
-  </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_ADD_EXTERNAL_FILES": "true",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "last_opened_file_path": "C:/Users/Elias Dobrin/Documents/GitHub/softbots/main.py",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)"
-  }
-}]]></component>
-  <component name="RecentsManager">
-    <key name="CopyFile.RECENT_KEYS">
-      <recent name="C:\Users\Elias Dobrin\Documents\GitHub\softbots" />
-    </key>
-  </component>
-  <component name="RunManager">
-    <configuration name="main" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
-      <module name="softbots" />
-      <option name="INTERPRETER_OPTIONS" value="" />
-      <option name="PARENT_ENVS" value="true" />
-      <envs>
-        <env name="PYTHONUNBUFFERED" value="1" />
-      </envs>
-      <option name="SDK_HOME" value="C:\Program Files\Python310\python.exe" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
-      <option name="IS_MODULE_SDK" value="false" />
-      <option name="ADD_CONTENT_ROOTS" value="true" />
-      <option name="ADD_SOURCE_ROOTS" value="true" />
-      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/main.py" />
-      <option name="PARAMETERS" value="" />
-      <option name="SHOW_COMMAND_LINE" value="false" />
-      <option name="EMULATE_TERMINAL" value="false" />
-      <option name="MODULE_MODE" value="false" />
-      <option name="REDIRECT_INPUT" value="false" />
-      <option name="INPUT_FILE" value="" />
-      <method v="2" />
-    </configuration>
-  </component>
-  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
-  <component name="TaskManager">
-    <task active="true" id="Default" summary="Default task">
-      <changelist id="dd83d79d-de36-4117-9c55-4dac2b433a09" name="Changes" comment="" />
-      <created>1655485246467</created>
-      <option name="number" value="Default" />
-      <option name="presentableId" value="Default" />
-      <updated>1655485246467</updated>
-      <workItem from="1655485248095" duration="4597000" />
-    </task>
-    <task id="LOCAL-00001" summary="working on model?">
-      <created>1655487038897</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1655487038897</updated>
-    </task>
-    <task id="LOCAL-00002" summary="working on rendering">
-      <created>1655497690520</created>
-      <option name="number" value="00002" />
-      <option name="presentableId" value="LOCAL-00002" />
-      <option name="project" value="LOCAL" />
-      <updated>1655497690520</updated>
-    </task>
-    <option name="localTasksCounter" value="3" />
-    <servers />
-  </component>
-  <component name="TypeScriptGeneratedFilesManager">
-    <option name="version" value="3" />
-  </component>
-  <component name="Vcs.Log.Tabs.Properties">
-    <option name="TAB_STATES">
-      <map>
-        <entry key="MAIN">
-          <value>
-            <State />
-          </value>
-        </entry>
-      </map>
-    </option>
-  </component>
-  <component name="VcsManagerConfiguration">
-    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
-    <MESSAGE value="working on model?" />
-    <MESSAGE value="working on rendering" />
-    <option name="LAST_COMMIT_MESSAGE" value="working on rendering" />
-  </component>
-  <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/softbots$main.coverage" NAME="main Coverage Results" MODIFIED="1655498308205" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-  </component>
-</project>
\ No newline at end of file
diff --git a/main.py b/main.py
deleted file mode 100644
index ac72e66..0000000
--- a/main.py
+++ /dev/null
@@ -1,124 +0,0 @@
-import os
-from math import sqrt, tau
-import cairo
-import ffmpeg
-from softbots import Softbot, Node, Link, Muscle
-from vectors import Vector
-
-os.makedirs("output", exist_ok=True)
-for png in os.scandir("output"):
-    os.remove(png)
-
-time = 5
-iterations = 10000
-f = 0
-camera_position = Vector(0.5, 0.5)
-camera_zoom = 0.9
-# softbody = Tower(width=0.5, height=0.5, grid=(5, 5), mass=1, stiffness=400 * input_s ** 2, dampening=5 * input_d ** 2)
-# softbody.translate(Vector(0.5, 0.5))
-# nodes = softbody.nodes
-# links = softbody.links
-
-nodes = [
-    Node(mass=0.2, position=Vector(0, 0)),
-    Node(mass=0.2, position=Vector(1, 0)),
-    Node(mass=0.2, position=Vector(1, 1)),
-    Node(mass=0.2, position=Vector(0, 1)),
-]
-
-for node in nodes:
-    node.position -= Vector(0.5, 0.5)
-    node.position /= 4
-    node.position += Vector(0.5, 0.5)
-
-links = []
-
-muscles = [
-    Muscle(nodes=(nodes[0], nodes[1]), stiffness=100, dampening=1),
-    Muscle(nodes=(nodes[1], nodes[2]), stiffness=100, dampening=1),
-    Muscle(nodes=(nodes[2], nodes[3]), stiffness=100, dampening=1),
-    Muscle(nodes=(nodes[3], nodes[0]), stiffness=100, dampening=1),
-    Muscle(nodes=(nodes[0], nodes[2]), stiffness=100, dampening=1),
-    Muscle(nodes=(nodes[1], nodes[3]), stiffness=100, dampening=1),
-]
-
-softbot = Softbot(nodes, links, muscles)
-
-for i in range(iterations):
-    for node in nodes:
-        node.force.set(Vector(0, 0))
-    for node in nodes:
-        node.force.add(Vector(0, -9.8 * node.mass))
-    for link in links + muscles:
-        node_1 = link.nodes[0]
-        node_2 = link.nodes[1]
-        node_1_force = link.get_force() * (
-                node_1.position - node_2.position
-        ) / Vector.dist(node_1.position, node_2.position)
-        node_1.force.add(node_1_force)
-        node_2.force.sub(node_1_force)
-    for node in nodes:
-        if node.position.y < 0:
-            node_force_normal = Vector(0, -500 * node.position.y)
-            node.force += node_force_normal
-    for node in nodes:
-        node.acceleration = node.force / node.mass
-        node.velocity.add(node.acceleration * (time / iterations))
-        node.position.add(node.velocity * (time / iterations))
-    if i % round(iterations / time / 60) == 0:
-        surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 1000, 1000)
-        context = cairo.Context(surface)
-        context.scale(1000, 1000)
-        context.rectangle(0, 0, 1, 1)
-        context.set_source_rgb(0.29, 0.17, 0)
-        context.fill_preserve()
-        gradient = cairo.RadialGradient(0.5, 0.5, 0, 0.5, 0.5, sqrt(2) / 2)
-        gradient.add_color_stop_rgba(0, 0, 0, 0, 0)
-        gradient.add_color_stop_rgba(1, 0, 0, 0, 0.2)
-        context.set_source(gradient)
-        context.fill()
-        context.translate(0.5, 0.5)
-        context.scale(1, -1)
-        context.scale(camera_zoom, camera_zoom)
-        context.translate(-camera_position.x, -camera_position.y)
-
-        context.rectangle(0, 0, 1, 1)
-        context.set_source_rgb(0.5, 0.94, 1)
-        context.fill_preserve()
-        context.set_source_rgb(0, 0, 0)
-        context.set_line_width(0.01)
-        context.stroke()
-
-        for link in links:
-            context.move_to(link.nodes[0].position.x, link.nodes[0].position.y)
-            context.line_to(link.nodes[1].position.x, link.nodes[1].position.y)
-            context.set_source_rgb(0, 0, 0)
-            context.set_line_width(0.01)
-            context.stroke()
-
-        for muscle in muscles:
-            context.move_to(muscle.nodes[0].position.x, muscle.nodes[0].position.y)
-            context.line_to(muscle.nodes[1].position.x, muscle.nodes[1].position.y)
-            context.set_source_rgb(0, 0, 0)
-            context.set_line_width(0.02)
-            context.stroke_preserve()
-            context.set_source_rgb(1, 0.7 * (1 - muscle.activation), 0.7 * (1 - muscle.activation))
-            context.set_line_width(0.01)
-            context.stroke()
-
-        for node in nodes:
-            context.arc(node.position.x, node.position.y, 0.01, 0, tau)
-            context.set_source_rgb(1, 1, 1)
-            context.fill_preserve()
-            context.set_source_rgb(0, 0, 0)
-            context.set_line_width(0.005)
-            context.stroke()
-
-        surface.write_to_png(f"output/{f:06d}.png")
-        f += 1
-
-ffmpeg.input("output/%06d.png", pattern_type="sequence", framerate=60).output("output.mp4").run(overwrite_output=True)
-for png in os.scandir("output"):
-    os.remove(png)
-os.rmdir("output")
-os.startfile("output.mp4")
diff --git a/model.py b/model.py
deleted file mode 100644
index 0c25be0..0000000
--- a/model.py
+++ /dev/null
@@ -1,26 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import torch.optim as optim
-
-
-class Net(nn.Module):
-    def __init__(self, input_size, hidden_size, output_size):
-        super().__init__()
-        self.linear_1 = nn.Linear(input_size, hidden_size)
-        self.linear_2 = nn.Linear(hidden_size, output_size)
-
-    def forward(self, x):
-        x = self.linear_1(x)
-        x = F.relu(x)
-        x = self.linear_2(x)
-        return x
-
-
-class Trainer:
-    def __init__(self, model, lr, gamma):
-        self.model = model
-        self.lr = lr
-        self.gamma = gamma
-        self.optimizer = optim.Adam(model.parameters(), lr=lr)
-        self.criterion = nn.MSELoss()
diff --git a/output.mp4 b/output.mp4
deleted file mode 100644
index 0c1aa98..0000000
Binary files a/output.mp4 and /dev/null differ
diff --git a/service.txt b/service.txt
index 499cb7b..320a502 100644
--- a/service.txt
+++ b/service.txt
@@ -1,17 +1,28 @@
-SCENARIOS
-=========
+GOALS
+=====
+Travel most to the right in one iteration.
+
+TERRAINS
+========
+Flat/rocky (depending on smoothing factor).
+
+NEURAL NETWORK
+==============
+Input data should not include terrain parameters such as smoothing factor as the goal is to 
+test softbots on different untrained terrains.
+Significance of input neurons should not change with terrain change.
 
 API
 ===
-POST    softbots/bot - To create a bot with JSON input of nodes and links and return the bid
-GET     softbots/bot - Redirect to softbots/bots
-GET     softbots/bot/:bid - To get a bot with bid
-DELETE  softbots/bot/:bid - To delete a bot with bid and associated models
-POST    softbots/model/:bid - To create a model with JSON input and return the mid
-PUT     softbots/model/:mid - To train and save a model with mid and JSON input of training parameters
-GET     softbots/model - Redirect to softbots/models
-GET     softbots/model/:mid - To get a model with mid
-DELETE  softbots/model/:mid - To delete a bot with mid
+POST    softbots/bot - To create a bot with JSON input of nodes and links and return the bid.
+GET     softbots/bot - Redirect to softbots/bots.
+GET     softbots/bot/:bid - To get a bot with bid.
+DELETE  softbots/bot/:bid - To delete a bot with bid and associated models.
+POST    softbots/model/:bid - To create a model with JSON input and return the mid.
+PUT     softbots/model/:mid - To train and save a model with mid and JSON input of training parameters.
+GET     softbots/model - Redirect to softbots/models.
+GET     softbots/model/:mid - To get a model with mid.
+DELETE  softbots/model/:mid - To delete a bot with mid.
 
 STORAGE
 =======

commit 5a6cbcbe9c1f335bd06ac93d9f00fc87a02aaa31
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 17 13:40:12 2022 -0700

    fixed rendering and muscle visualziation

diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
index 0000000..92e3c10
--- /dev/null
+++ b/.idea/workspace.xml
@@ -0,0 +1,130 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="dd83d79d-de36-4117-9c55-4dac2b433a09" name="Changes" comment="working on rendering">
+      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/output.mp4" beforeDir="false" afterPath="$PROJECT_DIR$/output.mp4" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/softbots.py" beforeDir="false" afterPath="$PROJECT_DIR$/softbots.py" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Python Script" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProjectId" id="2AiGyKiQjYn1JAOeVBPqYarbIaf" />
+  <component name="ProjectLevelVcsManager">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "last_opened_file_path": "C:/Users/Elias Dobrin/Documents/GitHub/softbots/main.py",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)"
+  }
+}]]></component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\Elias Dobrin\Documents\GitHub\softbots" />
+    </key>
+  </component>
+  <component name="RunManager">
+    <configuration name="main" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
+      <module name="softbots" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="C:\Program Files\Python310\python.exe" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
+      <option name="IS_MODULE_SDK" value="false" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/main.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="dd83d79d-de36-4117-9c55-4dac2b433a09" name="Changes" comment="" />
+      <created>1655485246467</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1655485246467</updated>
+      <workItem from="1655485248095" duration="4597000" />
+    </task>
+    <task id="LOCAL-00001" summary="working on model?">
+      <created>1655487038897</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1655487038897</updated>
+    </task>
+    <task id="LOCAL-00002" summary="working on rendering">
+      <created>1655497690520</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1655497690520</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
+    <MESSAGE value="working on model?" />
+    <MESSAGE value="working on rendering" />
+    <option name="LAST_COMMIT_MESSAGE" value="working on rendering" />
+  </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/softbots$main.coverage" NAME="main Coverage Results" MODIFIED="1655498308205" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/main.py b/main.py
index d067b42..ac72e66 100644
--- a/main.py
+++ b/main.py
@@ -44,9 +44,7 @@ muscles = [
 
 softbot = Softbot(nodes, links, muscles)
 
-print()
 for i in range(iterations):
-    print(f"SOLVING DIFFERENTIAL EQUATIONS: {round(100 * (i + 1) / iterations)}%", end="\r")
     for node in nodes:
         node.force.set(Vector(0, 0))
     for node in nodes:
@@ -101,7 +99,10 @@ for i in range(iterations):
         for muscle in muscles:
             context.move_to(muscle.nodes[0].position.x, muscle.nodes[0].position.y)
             context.line_to(muscle.nodes[1].position.x, muscle.nodes[1].position.y)
-            context.set_source_rgb(1, 1 - 0.3 * muscle.activation, 1 - muscle.activation)
+            context.set_source_rgb(0, 0, 0)
+            context.set_line_width(0.02)
+            context.stroke_preserve()
+            context.set_source_rgb(1, 0.7 * (1 - muscle.activation), 0.7 * (1 - muscle.activation))
             context.set_line_width(0.01)
             context.stroke()
 
diff --git a/output.mp4 b/output.mp4
index 49571e4..0c1aa98 100644
Binary files a/output.mp4 and b/output.mp4 differ
diff --git a/softbots.py b/softbots.py
index f06c7ab..fef6944 100644
--- a/softbots.py
+++ b/softbots.py
@@ -20,7 +20,7 @@ class Muscle(Link):
     def __init__(self, nodes: tuple[Node, Node], stiffness: float, dampening: float, length: float = None) -> None:
         super().__init__(nodes, stiffness, dampening, length)
         self.activation = 0
-        self.length_original = length
+        self.length_original = self.length
 
     def set_length(self, activation) -> None:
         self.activation = activation

commit 24fa113b2263e187e4e6b3bd55984f9432f0749f
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 17 13:28:10 2022 -0700

    working on rendering

diff --git a/main.py b/main.py
new file mode 100644
index 0000000..d067b42
--- /dev/null
+++ b/main.py
@@ -0,0 +1,123 @@
+import os
+from math import sqrt, tau
+import cairo
+import ffmpeg
+from softbots import Softbot, Node, Link, Muscle
+from vectors import Vector
+
+os.makedirs("output", exist_ok=True)
+for png in os.scandir("output"):
+    os.remove(png)
+
+time = 5
+iterations = 10000
+f = 0
+camera_position = Vector(0.5, 0.5)
+camera_zoom = 0.9
+# softbody = Tower(width=0.5, height=0.5, grid=(5, 5), mass=1, stiffness=400 * input_s ** 2, dampening=5 * input_d ** 2)
+# softbody.translate(Vector(0.5, 0.5))
+# nodes = softbody.nodes
+# links = softbody.links
+
+nodes = [
+    Node(mass=0.2, position=Vector(0, 0)),
+    Node(mass=0.2, position=Vector(1, 0)),
+    Node(mass=0.2, position=Vector(1, 1)),
+    Node(mass=0.2, position=Vector(0, 1)),
+]
+
+for node in nodes:
+    node.position -= Vector(0.5, 0.5)
+    node.position /= 4
+    node.position += Vector(0.5, 0.5)
+
+links = []
+
+muscles = [
+    Muscle(nodes=(nodes[0], nodes[1]), stiffness=100, dampening=1),
+    Muscle(nodes=(nodes[1], nodes[2]), stiffness=100, dampening=1),
+    Muscle(nodes=(nodes[2], nodes[3]), stiffness=100, dampening=1),
+    Muscle(nodes=(nodes[3], nodes[0]), stiffness=100, dampening=1),
+    Muscle(nodes=(nodes[0], nodes[2]), stiffness=100, dampening=1),
+    Muscle(nodes=(nodes[1], nodes[3]), stiffness=100, dampening=1),
+]
+
+softbot = Softbot(nodes, links, muscles)
+
+print()
+for i in range(iterations):
+    print(f"SOLVING DIFFERENTIAL EQUATIONS: {round(100 * (i + 1) / iterations)}%", end="\r")
+    for node in nodes:
+        node.force.set(Vector(0, 0))
+    for node in nodes:
+        node.force.add(Vector(0, -9.8 * node.mass))
+    for link in links + muscles:
+        node_1 = link.nodes[0]
+        node_2 = link.nodes[1]
+        node_1_force = link.get_force() * (
+                node_1.position - node_2.position
+        ) / Vector.dist(node_1.position, node_2.position)
+        node_1.force.add(node_1_force)
+        node_2.force.sub(node_1_force)
+    for node in nodes:
+        if node.position.y < 0:
+            node_force_normal = Vector(0, -500 * node.position.y)
+            node.force += node_force_normal
+    for node in nodes:
+        node.acceleration = node.force / node.mass
+        node.velocity.add(node.acceleration * (time / iterations))
+        node.position.add(node.velocity * (time / iterations))
+    if i % round(iterations / time / 60) == 0:
+        surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 1000, 1000)
+        context = cairo.Context(surface)
+        context.scale(1000, 1000)
+        context.rectangle(0, 0, 1, 1)
+        context.set_source_rgb(0.29, 0.17, 0)
+        context.fill_preserve()
+        gradient = cairo.RadialGradient(0.5, 0.5, 0, 0.5, 0.5, sqrt(2) / 2)
+        gradient.add_color_stop_rgba(0, 0, 0, 0, 0)
+        gradient.add_color_stop_rgba(1, 0, 0, 0, 0.2)
+        context.set_source(gradient)
+        context.fill()
+        context.translate(0.5, 0.5)
+        context.scale(1, -1)
+        context.scale(camera_zoom, camera_zoom)
+        context.translate(-camera_position.x, -camera_position.y)
+
+        context.rectangle(0, 0, 1, 1)
+        context.set_source_rgb(0.5, 0.94, 1)
+        context.fill_preserve()
+        context.set_source_rgb(0, 0, 0)
+        context.set_line_width(0.01)
+        context.stroke()
+
+        for link in links:
+            context.move_to(link.nodes[0].position.x, link.nodes[0].position.y)
+            context.line_to(link.nodes[1].position.x, link.nodes[1].position.y)
+            context.set_source_rgb(0, 0, 0)
+            context.set_line_width(0.01)
+            context.stroke()
+
+        for muscle in muscles:
+            context.move_to(muscle.nodes[0].position.x, muscle.nodes[0].position.y)
+            context.line_to(muscle.nodes[1].position.x, muscle.nodes[1].position.y)
+            context.set_source_rgb(1, 1 - 0.3 * muscle.activation, 1 - muscle.activation)
+            context.set_line_width(0.01)
+            context.stroke()
+
+        for node in nodes:
+            context.arc(node.position.x, node.position.y, 0.01, 0, tau)
+            context.set_source_rgb(1, 1, 1)
+            context.fill_preserve()
+            context.set_source_rgb(0, 0, 0)
+            context.set_line_width(0.005)
+            context.stroke()
+
+        surface.write_to_png(f"output/{f:06d}.png")
+        f += 1
+
+ffmpeg.input("output/%06d.png", pattern_type="sequence", framerate=60).output("output.mp4").run(overwrite_output=True)
+for png in os.scandir("output"):
+    os.remove(png)
+os.rmdir("output")
+os.startfile("output.mp4")
diff --git a/model.py b/model.py
index a0c28fd..0c25be0 100644
--- a/model.py
+++ b/model.py
@@ -11,7 +11,8 @@ class Net(nn.Module):
         self.linear_2 = nn.Linear(hidden_size, output_size)
 
     def forward(self, x):
-        x = F.relu(self.linear_1(x))
+        x = self.linear_1(x)
+        x = F.relu(x)
         x = self.linear_2(x)
         return x
 
diff --git a/output.mp4 b/output.mp4
new file mode 100644
index 0000000..49571e4
Binary files /dev/null and b/output.mp4 differ
diff --git a/softbots.py b/softbots.py
index 295d165..f06c7ab 100644
--- a/softbots.py
+++ b/softbots.py
@@ -14,11 +14,14 @@ class Softbot:
 
 
 class Muscle(Link):
+    activation: float
     length_original: float
 
     def __init__(self, nodes: tuple[Node, Node], stiffness: float, dampening: float, length: float = None) -> None:
         super().__init__(nodes, stiffness, dampening, length)
+        self.activation = 0
         self.length_original = length
 
     def set_length(self, activation) -> None:
+        self.activation = activation
         self.length = self.length_original * min(max((1 - 0.5 * activation), 0), 1)

commit 3b0edd0ddfb795fd3745df21192079ed312c36c9
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 17 10:30:38 2022 -0700

    working on model?

diff --git a/model.py b/model.py
new file mode 100644
index 0000000..a0c28fd
--- /dev/null
+++ b/model.py
@@ -0,0 +1,25 @@
+import torch
+import torch.nn as nn
+import torch.nn.functional as F
+import torch.optim as optim
+
+
+class Net(nn.Module):
+    def __init__(self, input_size, hidden_size, output_size):
+        super().__init__()
+        self.linear_1 = nn.Linear(input_size, hidden_size)
+        self.linear_2 = nn.Linear(hidden_size, output_size)
+
+    def forward(self, x):
+        x = F.relu(self.linear_1(x))
+        x = self.linear_2(x)
+        return x
+
+
+class Trainer:
+    def __init__(self, model, lr, gamma):
+        self.model = model
+        self.lr = lr
+        self.gamma = gamma
+        self.optimizer = optim.Adam(model.parameters(), lr=lr)
+        self.criterion = nn.MSELoss()

commit 84c15e296824dbf21a704c325ec657859405ee74
Merge: 347f460 6dd92c1
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 17 10:02:31 2022 -0700

    Merge branch 'main' of https://github.com/Elixonus/softbots

commit 347f460c04dd684d86a6fa08a18fc3ad6d7ba4f9
Author: Elias Dobrin <elias@dobrin.net>
Date:   Fri Jun 17 10:01:47 2022 -0700

    cleanup

diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
index 13566b8..0000000
--- a/.idea/.gitignore
+++ /dev/null
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
diff --git a/.idea/softbots.iml b/.idea/softbots.iml
index ae8ddcf..fa7a615 100644
--- a/.idea/softbots.iml
+++ b/.idea/softbots.iml
@@ -1,17 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="PYTHON_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="django" name="Django">
-      <configuration>
-        <option name="rootFolder" value="$MODULE_DIR$" />
-        <option name="settingsModule" value="softbots/settings.py" />
-        <option name="manageScript" value="$MODULE_DIR$/manage.py" />
-        <option name="environment" value="&lt;map/&gt;" />
-        <option name="doNotUseTestRunner" value="false" />
-        <option name="trackFilePattern" value="migrations" />
-      </configuration>
-    </facet>
-  </component>
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
     <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
@@ -21,7 +9,4 @@
     <option name="format" value="PLAIN" />
     <option name="myDocStringFormat" value="Plain" />
   </component>
-  <component name="TemplatesService">
-    <option name="TEMPLATE_CONFIGURATION" value="Django" />
-  </component>
 </module>
\ No newline at end of file
diff --git a/manage.py b/manage.py
deleted file mode 100644
index 4041fe6..0000000
--- a/manage.py
+++ /dev/null
@@ -1,22 +0,0 @@
-#!/usr/bin/env python
-"""Django's command-line utility for administrative tasks."""
-import os
-import sys
-
-
-def main():
-    """Run administrative tasks."""
-    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'softbots.settings')
-    try:
-        from django.core.management import execute_from_command_line
-    except ImportError as exc:
-        raise ImportError(
-            "Couldn't import Django. Are you sure it's installed and "
-            "available on your PYTHONPATH environment variable? Did you "
-            "forget to activate a virtual environment?"
-        ) from exc
-    execute_from_command_line(sys.argv)
-
-
-if __name__ == '__main__':
-    main()
diff --git a/softbots.py b/softbots.py
new file mode 100644
index 0000000..295d165
--- /dev/null
+++ b/softbots.py
@@ -0,0 +1,24 @@
+from __future__ import annotations
+from softbodies import Node, Link
+
+
+class Softbot:
+    nodes: list[Node]
+    links: list[Link]
+    muscles: list[Muscle]
+
+    def __init__(self, nodes: list[Node], links: list[Link], muscles: list[Muscle]) -> None:
+        self.nodes = nodes
+        self.links = links
+        self.muscles = muscles
+
+
+class Muscle(Link):
+    length_original: float
+
+    def __init__(self, nodes: tuple[Node, Node], stiffness: float, dampening: float, length: float = None) -> None:
+        super().__init__(nodes, stiffness, dampening, length)
+        self.length_original = length
+
+    def set_length(self, activation) -> None:
+        self.length = self.length_original * min(max((1 - 0.5 * activation), 0), 1)
diff --git a/softbots/__init__.py b/softbots/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/softbots/asgi.py b/softbots/asgi.py
deleted file mode 100644
index 597850f..0000000
--- a/softbots/asgi.py
+++ /dev/null
@@ -1,16 +0,0 @@
-"""
-ASGI config for softbots project.
-
-It exposes the ASGI callable as a module-level variable named ``application``.
-
-For more information on this file, see
-https://docs.djangoproject.com/en/4.0/howto/deployment/asgi/
-"""
-
-import os
-
-from django.core.asgi import get_asgi_application
-
-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'softbots.settings')
-
-application = get_asgi_application()
diff --git a/softbots/settings.py b/softbots/settings.py
deleted file mode 100644
index 3a44a6a..0000000
--- a/softbots/settings.py
+++ /dev/null
@@ -1,123 +0,0 @@
-"""
-Django settings for softbots project.
-
-Generated by 'django-admin startproject' using Django 4.0.5.
-
-For more information on this file, see
-https://docs.djangoproject.com/en/4.0/topics/settings/
-
-For the full list of settings and their values, see
-https://docs.djangoproject.com/en/4.0/ref/settings/
-"""
-
-from pathlib import Path
-
-# Build paths inside the project like this: BASE_DIR / 'subdir'.
-BASE_DIR = Path(__file__).resolve().parent.parent
-
-
-# Quick-start development settings - unsuitable for production
-# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/
-
-# SECURITY WARNING: keep the secret key used in production secret!
-SECRET_KEY = 'django-insecure-5i&p)-ee&ovs%e+jfvtw@7lk$#c!23o0j=m(agkej=fv3ewp9u'
-
-# SECURITY WARNING: don't run with debug turned on in production!
-DEBUG = True
-
-ALLOWED_HOSTS = []
-
-
-# Application definition
-
-INSTALLED_APPS = [
-    'django.contrib.admin',
-    'django.contrib.auth',
-    'django.contrib.contenttypes',
-    'django.contrib.sessions',
-    'django.contrib.messages',
-    'django.contrib.staticfiles',
-]
-
-MIDDLEWARE = [
-    'django.middleware.security.SecurityMiddleware',
-    'django.contrib.sessions.middleware.SessionMiddleware',
-    'django.middleware.common.CommonMiddleware',
-    'django.middleware.csrf.CsrfViewMiddleware',
-    'django.contrib.auth.middleware.AuthenticationMiddleware',
-    'django.contrib.messages.middleware.MessageMiddleware',
-    'django.middleware.clickjacking.XFrameOptionsMiddleware',
-]
-
-ROOT_URLCONF = 'softbots.urls'
-
-TEMPLATES = [
-    {
-        'BACKEND': 'django.template.backends.django.DjangoTemplates',
-        'DIRS': [],
-        'APP_DIRS': True,
-        'OPTIONS': {
-            'context_processors': [
-                'django.template.context_processors.debug',
-                'django.template.context_processors.request',
-                'django.contrib.auth.context_processors.auth',
-                'django.contrib.messages.context_processors.messages',
-            ],
-        },
-    },
-]
-
-WSGI_APPLICATION = 'softbots.wsgi.application'
-
-
-# Database
-# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
-
-DATABASES = {
-    'default': {
-        'ENGINE': 'django.db.backends.sqlite3',
-        'NAME': BASE_DIR / 'db.sqlite3',
-    }
-}
-
-
-# Password validation
-# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
-
-AUTH_PASSWORD_VALIDATORS = [
-    {
-        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
-    },
-]
-
-
-# Internationalization
-# https://docs.djangoproject.com/en/4.0/topics/i18n/
-
-LANGUAGE_CODE = 'en-us'
-
-TIME_ZONE = 'UTC'
-
-USE_I18N = True
-
-USE_TZ = True
-
-
-# Static files (CSS, JavaScript, Images)
-# https://docs.djangoproject.com/en/4.0/howto/static-files/
-
-STATIC_URL = 'static/'
-
-# Default primary key field type
-# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
-
-DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/softbots/urls.py b/softbots/urls.py
deleted file mode 100644
index 035c5ec..0000000
--- a/softbots/urls.py
+++ /dev/null
@@ -1,26 +0,0 @@
-"""softbots URL Configuration
-
-The `urlpatterns` list routes URLs to views. For more information please see:
-    https://docs.djangoproject.com/en/4.0/topics/http/urls/
-Examples:
-Function views
-    1. Add an import:  from my_app import views
-    2. Add a URL to urlpatterns:  path('', views.home, name='home')
-Class-based views
-    1. Add an import:  from other_app.views import Home
-    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
-Including another URLconf
-    1. Import the include() function: from django.urls import include, path
-    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
-"""
-from django.contrib import admin
-from django.urls import path
-from . import views
-
-urlpatterns = [
-    path('bot/', views.bot_create),
-    path('bot/<str:bot_id>/', views.bot_change),
-    path('model/', views.model_create),
-    path('model/<str:model_id>', views.model_change),
-    path('admin/', admin.site.urls),
-]
diff --git a/softbots/views.py b/softbots/views.py
deleted file mode 100644
index 5924212..0000000
--- a/softbots/views.py
+++ /dev/null
@@ -1,33 +0,0 @@
-from django.http import HttpResponse
-import json
-
-
-def bot_create(request):
-    if request.method == "POST":
-        try:
-            data = json.loads(request.body)
-            data_nodes = data["nodes"]
-            data_links = data["links"]
-            for data_node in data_nodes:
-                data_node_mass = data_node["mass"]
-                data_node_position = data_node["position"]
-                data_node_position_x = data_node_position["x"]
-                data_node_position_y = data_node_position["y"]
-            return HttpResponse(json.dumps(data))
-        except json.JSONDecodeError:
-            return
-
-
-    return HttpResponse("Create bot!")
-
-
-def bot_change(request):
-    return HttpResponse(f"Change bot with {request.method} method!")
-
-
-def model_create(request):
-    return HttpResponse("Create model!")
-
-
-def model_change(request):
-    return HttpResponse(f"Change model with {request.method} method!")
diff --git a/softbots/wsgi.py b/softbots/wsgi.py
deleted file mode 100644
index 663bd4c..0000000
--- a/softbots/wsgi.py
+++ /dev/null
@@ -1,16 +0,0 @@
-"""
-WSGI config for softbots project.
-
-It exposes the WSGI callable as a module-level variable named ``application``.
-
-For more information on this file, see
-https://docs.djangoproject.com/en/4.0/howto/deployment/wsgi/
-"""
-
-import os
-
-from django.core.wsgi import get_wsgi_application
-
-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'softbots.settings')
-
-application = get_wsgi_application()

commit 6dd92c134a11cdf3b2439fe58b50928a1132a191
Author: Elias <elias@dobrin.net>
Date:   Fri Jun 17 09:28:06 2022 -0700

    Update views.py

diff --git a/softbots/views.py b/softbots/views.py
index 5924212..79cd969 100644
--- a/softbots/views.py
+++ b/softbots/views.py
@@ -6,17 +6,23 @@ def bot_create(request):
     if request.method == "POST":
         try:
             data = json.loads(request.body)
-            data_nodes = data["nodes"]
-            data_links = data["links"]
-            for data_node in data_nodes:
-                data_node_mass = data_node["mass"]
-                data_node_position = data_node["position"]
-                data_node_position_x = data_node_position["x"]
-                data_node_position_y = data_node_position["y"]
-            return HttpResponse(json.dumps(data))
         except json.JSONDecodeError:
             return
+        else:
+            nodes = []
 
+            data_nodes = list(data["nodes"])
+            for data_node in data_nodes:
+                str(data_node)
+                float(data_node["mass"])
+                data_node_position = dict(data_node["position"])
+                float(data_node_position["x"])
+                float(data_node_position["y"])
+            data_links = list(data["links"])
+            for data_link in data_links:
+
+            data_muscles = data["muscles"]
+            return HttpResponse(json.dumps(data))
 
     return HttpResponse("Create bot!")
 

commit cea2c7abdf38e54ec6e97c7ac510e8a186764550
Author: Elias Dobrin <elias@dobrin.net>
Date:   Mon Jun 13 20:54:42 2022 -0700

    not sure what to do

diff --git a/softbots/urls.py b/softbots/urls.py
index d2ee21e..035c5ec 100644
--- a/softbots/urls.py
+++ b/softbots/urls.py
@@ -19,8 +19,8 @@ from . import views
 
 urlpatterns = [
     path('bot/', views.bot_create),
-    path('bot/<uuid:bot_id>/', views.bot_change),
+    path('bot/<str:bot_id>/', views.bot_change),
     path('model/', views.model_create),
-    path('model/<uuid:model_id>', views.model_change),
+    path('model/<str:model_id>', views.model_change),
     path('admin/', admin.site.urls),
 ]
diff --git a/softbots/views.py b/softbots/views.py
index d6d7cd2..5924212 100644
--- a/softbots/views.py
+++ b/softbots/views.py
@@ -1,7 +1,23 @@
 from django.http import HttpResponse
+import json
 
 
 def bot_create(request):
+    if request.method == "POST":
+        try:
+            data = json.loads(request.body)
+            data_nodes = data["nodes"]
+            data_links = data["links"]
+            for data_node in data_nodes:
+                data_node_mass = data_node["mass"]
+                data_node_position = data_node["position"]
+                data_node_position_x = data_node_position["x"]
+                data_node_position_y = data_node_position["y"]
+            return HttpResponse(json.dumps(data))
+        except json.JSONDecodeError:
+            return
+
+
     return HttpResponse("Create bot!")
 
 

commit 181234721fe2244f5558b810262b0503c9af3a0b
Author: Elias Dobrin <elias@dobrin.net>
Date:   Mon Jun 13 20:25:31 2022 -0700

    working on url confs

diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
index 0000000..13566b8
--- /dev/null
+++ b/.idea/.gitignore
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
index 0000000..5101a59
--- /dev/null
+++ b/.idea/inspectionProfiles/Project_Default.xml
@@ -0,0 +1,31 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="HtmlUnknownTag" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="myValues">
+        <value>
+          <list size="7">
+            <item index="0" class="java.lang.String" itemvalue="nobr" />
+            <item index="1" class="java.lang.String" itemvalue="noembed" />
+            <item index="2" class="java.lang.String" itemvalue="comment" />
+            <item index="3" class="java.lang.String" itemvalue="noscript" />
+            <item index="4" class="java.lang.String" itemvalue="embed" />
+            <item index="5" class="java.lang.String" itemvalue="script" />
+            <item index="6" class="java.lang.String" itemvalue="style" />
+          </list>
+        </value>
+      </option>
+      <option name="myCustomValuesEnabled" value="true" />
+    </inspection_tool>
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredPackages">
+        <value>
+          <list size="2">
+            <item index="0" class="java.lang.String" itemvalue="mazelib" />
+            <item index="1" class="java.lang.String" itemvalue="euclid" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
index 0000000..105ce2d
--- /dev/null
+++ b/.idea/inspectionProfiles/profiles_settings.xml
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000..dc9ea49
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000..0609e15
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/softbots.iml" filepath="$PROJECT_DIR$/.idea/softbots.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/softbots.iml b/.idea/softbots.iml
new file mode 100644
index 0000000..ae8ddcf
--- /dev/null
+++ b/.idea/softbots.iml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="django" name="Django">
+      <configuration>
+        <option name="rootFolder" value="$MODULE_DIR$" />
+        <option name="settingsModule" value="softbots/settings.py" />
+        <option name="manageScript" value="$MODULE_DIR$/manage.py" />
+        <option name="environment" value="&lt;map/&gt;" />
+        <option name="doNotUseTestRunner" value="false" />
+        <option name="trackFilePattern" value="migrations" />
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+  <component name="TemplatesService">
+    <option name="TEMPLATE_CONFIGURATION" value="Django" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..94a25f7
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/softbodies.py b/softbodies.py
index f4a5bb6..51e63ce 100644
--- a/softbodies.py
+++ b/softbodies.py
@@ -53,14 +53,14 @@ class Link:
         """Get the momentary length of the link."""
         return Vector.dist(self.nodes[0].position, self.nodes[1].position)
 
-    def get_velocity(self) -> float:
-        """Get the speed of the expansion/contraction of the link (positive/negative)."""
-        return Vector.dot(self.nodes[0].position - self.nodes[1].position, self.nodes[0].velocity - self.nodes[1].velocity) / self.get_length()
-
     def get_displacement(self) -> float:
         """Get the expansion/contraction of the link from its resting configuration (positive/negative)."""
         return self.get_length() - self.length
 
+    def get_velocity(self) -> float:
+        """Get the speed of the expansion/contraction of the link (positive/negative)."""
+        return Vector.dot(self.nodes[0].position - self.nodes[1].position, self.nodes[0].velocity - self.nodes[1].velocity) / self.get_length()
+
     def get_stiffness_force(self) -> float:
         """Get the spring stiffness force expansion/contraction (positive/negative)."""
         return -self.stiffness * self.get_displacement()
diff --git a/softbots/urls.py b/softbots/urls.py
index 9db6a2a..d2ee21e 100644
--- a/softbots/urls.py
+++ b/softbots/urls.py
@@ -15,7 +15,12 @@ Including another URLconf
 """
 from django.contrib import admin
 from django.urls import path
+from . import views
 
 urlpatterns = [
+    path('bot/', views.bot_create),
+    path('bot/<uuid:bot_id>/', views.bot_change),
+    path('model/', views.model_create),
+    path('model/<uuid:model_id>', views.model_change),
     path('admin/', admin.site.urls),
 ]
diff --git a/softbots/views.py b/softbots/views.py
new file mode 100644
index 0000000..d6d7cd2
--- /dev/null
+++ b/softbots/views.py
@@ -0,0 +1,17 @@
+from django.http import HttpResponse
+
+
+def bot_create(request):
+    return HttpResponse("Create bot!")
+
+
+def bot_change(request):
+    return HttpResponse(f"Change bot with {request.method} method!")
+
+
+def model_create(request):
+    return HttpResponse("Create model!")
+
+
+def model_change(request):
+    return HttpResponse(f"Change model with {request.method} method!")

commit d8d7937a976235bfc21eac3850f4d5579b937024
Author: Elias Dobrin <elias@dobrin.net>
Date:   Mon Jun 13 19:56:15 2022 -0700

    django project started

diff --git a/.gitignore b/.gitignore
index 09a21f2..b6e4761 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,3 @@
-output.mp4
-
 # Byte-compiled / optimized / DLL files
 __pycache__/
 *.py[cod]
diff --git a/main.py b/main.py
deleted file mode 100644
index aa71acc..0000000
--- a/main.py
+++ /dev/null
@@ -1,48 +0,0 @@
-from math import tau
-import os
-import cairo
-import ffmpeg
-from softbodies import Softbody, Node, Link
-from vectors import Vector
-
-camera_position = Vector(0, 0)
-camera_zoom = 1
-
-nodes = [
-    Node(mass=0.01, position=Vector(0, 0.1258)),
-    Node(mass=0.01, position=Vector(0.2384, 0.3957)),
-    Node(mass=0.01, position=Vector(0.5579, 0.4934)),
-    Node(mass=0.01, position=Vector(0.8030, 0.3957)),
-    Node(mass=0.01, position=Vector(0.9387, 0.2285)),
-    Node(mass=0.01, position=Vector(1, 0.0315)),
-    Node(mass=0.01, position=Vector(0.7317, 0.0132)),
-    Node(mass=0.01, position=Vector(0.5579, 0.1474)),
-    Node(mass=0.01, position=Vector(0.3030, 0)),
-]
-
-links = [
-    Link(nodes=(nodes[0], nodes[1]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[1], nodes[2]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[2], nodes[3]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[3], nodes[4]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[4], nodes[5]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[5], nodes[6]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[6], nodes[7]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[7], nodes[8]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[8], nodes[0]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[1], nodes[8]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[4], nodes[6]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[1], nodes[7]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[2], nodes[7]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[3], nodes[7]), stiffness=200, dampening=1),
-    Link(nodes=(nodes[4], nodes[7]), stiffness=200, dampening=1),
-]
-
-softbody = Softbody(nodes, links)
-
-for cartilage in nodes:
-    cartilage.position.x -= 0.5
-    cartilage.position.y -= 0.5
-    cartilage.position /= 2
-    cartilage.position.y += 0.5
-
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000..4041fe6
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'softbots.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/softbots/__init__.py b/softbots/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/softbots/asgi.py b/softbots/asgi.py
new file mode 100644
index 0000000..597850f
--- /dev/null
+++ b/softbots/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for softbots project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.0/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'softbots.settings')
+
+application = get_asgi_application()
diff --git a/softbots/settings.py b/softbots/settings.py
new file mode 100644
index 0000000..3a44a6a
--- /dev/null
+++ b/softbots/settings.py
@@ -0,0 +1,123 @@
+"""
+Django settings for softbots project.
+
+Generated by 'django-admin startproject' using Django 4.0.5.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.0/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/4.0/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-5i&p)-ee&ovs%e+jfvtw@7lk$#c!23o0j=m(agkej=fv3ewp9u'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'softbots.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'softbots.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/4.0/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/4.0/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/softbots/urls.py b/softbots/urls.py
new file mode 100644
index 0000000..9db6a2a
--- /dev/null
+++ b/softbots/urls.py
@@ -0,0 +1,21 @@
+"""softbots URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/4.0/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/softbots/wsgi.py b/softbots/wsgi.py
new file mode 100644
index 0000000..663bd4c
--- /dev/null
+++ b/softbots/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for softbots project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.0/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'softbots.settings')
+
+application = get_wsgi_application()

commit a43d5aee1ea42568ff39dcd212c72bd620ea23d0
Author: Elias Dobrin <elias@dobrin.net>
Date:   Mon Jun 13 13:32:43 2022 -0700

    Update service.txt

diff --git a/service.txt b/service.txt
index e96357a..499cb7b 100644
--- a/service.txt
+++ b/service.txt
@@ -3,16 +3,15 @@ SCENARIOS
 
 API
 ===
-POST    softbots/bot - To create a bot with JSON input of nodes and links
+POST    softbots/bot - To create a bot with JSON input of nodes and links and return the bid
 GET     softbots/bot - Redirect to softbots/bots
-GET     softbots/bot/:id - To get a bot with id
-DELETE  softbots/bot/:id - To delete a bot with id and associated models
-
-POST    softbots/model/:id - To create a model with JSON input and return the id
-PUT     softbots/model/:id - To train and save a model with JSON input of training parameters
+GET     softbots/bot/:bid - To get a bot with bid
+DELETE  softbots/bot/:bid - To delete a bot with bid and associated models
+POST    softbots/model/:bid - To create a model with JSON input and return the mid
+PUT     softbots/model/:mid - To train and save a model with mid and JSON input of training parameters
 GET     softbots/model - Redirect to softbots/models
-GET     softbots/model/:id - To get a model with id
-DELETE  softbots/model/:id - To delete a bot with id
+GET     softbots/model/:mid - To get a model with mid
+DELETE  softbots/model/:mid - To delete a bot with mid
 
 STORAGE
 =======

commit 47ef86ab9503fc3ec03636ea9c68039025a89507
Author: Elias Dobrin <elias@dobrin.net>
Date:   Mon Jun 13 13:26:13 2022 -0700

    fixed

diff --git a/softbodies.py b/softbodies.py
index 6e7cd0f..f4a5bb6 100644
--- a/softbodies.py
+++ b/softbodies.py
@@ -1,4 +1,4 @@
-"""Python module for simulating physics of softbodies following Hooke's principles."""
+"""Module for simulating physics of softbodies following Hooke's principles."""
 
 from __future__ import annotations
 from vectors import Vector
diff --git a/vectors.py b/vectors.py
index ff5b6bf..88a1b37 100644
--- a/vectors.py
+++ b/vectors.py
@@ -1,4 +1,4 @@
-"""Python module for dealing with two-dimensional vectors."""
+"""Module for dealing with two-dimensional vectors."""
 
 from __future__ import annotations
 from math import hypot
@@ -124,9 +124,3 @@ class Vector:
     def copy(self) -> Vector:
         """Copy the vector instance."""
         return Vector(self.x, self.y)
-
-
-if __name__ == "__main__":
-    from time import sleep
-    print("Do not run me! This is just a dependency program")
-    sleep(5)
\ No newline at end of file

commit e0868c4a936034c2b4914a829d46331df6750bca
Author: Elias Dobrin <elias@dobrin.net>
Date:   Mon Jun 13 13:18:09 2022 -0700

    Update service.txt

diff --git a/service.txt b/service.txt
index 0e33a50..e96357a 100644
--- a/service.txt
+++ b/service.txt
@@ -1,7 +1,6 @@
 SCENARIOS
 =========
 
-
 API
 ===
 POST    softbots/bot - To create a bot with JSON input of nodes and links
@@ -15,14 +14,12 @@ GET     softbots/model - Redirect to softbots/models
 GET     softbots/model/:id - To get a model with id
 DELETE  softbots/model/:id - To delete a bot with id
 
-INSIDE
-======
+STORAGE
+=======
 In each bot folder there is bot.json which contains the nodes and links data.
 In each model folder there is model.json which gives what scenario the corresponding bot was trained on
 as well as the bot id of the current model. As well as the pytorch saved model.
 
-STORAGE
-=======
 softbots/
   bots/
     BKLGKJSB/
@@ -40,4 +37,4 @@ softbots/
       model.pt
     MNVBCNDM/
       model.json
-      model.pt
\ No newline at end of file
+      model.pt

commit 266925cace28334f0d204a492a0e29c37686be5c
Author: Elias Dobrin <elias@dobrin.net>
Date:   Sun Jun 12 23:04:29 2022 -0700

    updated service.txt

diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
index 13566b8..0000000
--- a/.idea/.gitignore
+++ /dev/null
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
deleted file mode 100644
index 98484bc..0000000
--- a/.idea/inspectionProfiles/Project_Default.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <profile version="1.0">
-    <option name="myName" value="Project Default" />
-    <inspection_tool class="DuplicatedCode" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
-    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="ignoredPackages">
-        <value>
-          <list size="6">
-            <item index="0" class="java.lang.String" itemvalue="fonttools" />
-            <item index="1" class="java.lang.String" itemvalue="kiwisolver" />
-            <item index="2" class="java.lang.String" itemvalue="pyparsing" />
-            <item index="3" class="java.lang.String" itemvalue="matplotlib" />
-            <item index="4" class="java.lang.String" itemvalue="Pillow" />
-            <item index="5" class="java.lang.String" itemvalue="numpy" />
-          </list>
-        </value>
-      </option>
-    </inspection_tool>
-    <inspection_tool class="PyPep8Inspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
-      <option name="ignoredErrors">
-        <list>
-          <option value="E501" />
-        </list>
-      </option>
-    </inspection_tool>
-  </profile>
-</component>
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
deleted file mode 100644
index 105ce2d..0000000
--- a/.idea/inspectionProfiles/profiles_settings.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <settings>
-    <option name="USE_PROJECT_PROFILE" value="false" />
-    <version value="1.0" />
-  </settings>
-</component>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
index dc9ea49..0000000
--- a/.idea/misc.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
-</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
deleted file mode 100644
index 0609e15..0000000
--- a/.idea/modules.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/softbots.iml" filepath="$PROJECT_DIR$/.idea/softbots.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
diff --git a/.idea/softbots.iml b/.idea/softbots.iml
deleted file mode 100644
index 8b8c395..0000000
--- a/.idea/softbots.iml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="PYTHON_MODULE" version="4">
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-  <component name="PyDocumentationSettings">
-    <option name="format" value="PLAIN" />
-    <option name="myDocStringFormat" value="Plain" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
index 94a25f7..0000000
--- a/.idea/vcs.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
diff --git a/service.txt b/service.txt
index c975775..0e33a50 100644
--- a/service.txt
+++ b/service.txt
@@ -6,17 +6,19 @@ API
 ===
 POST    softbots/bot - To create a bot with JSON input of nodes and links
 GET     softbots/bot - Redirect to softbots/bots
-GET     softbots/bot/:id: - To get a bot with id
-DELETE  softbots/bot/:id: - To delete a bot with id
-PUT     softbots/model - To train and save a model with JSON input of training parameters
+GET     softbots/bot/:id - To get a bot with id
+DELETE  softbots/bot/:id - To delete a bot with id and associated models
+
+POST    softbots/model/:id - To create a model with JSON input and return the id
+PUT     softbots/model/:id - To train and save a model with JSON input of training parameters
 GET     softbots/model - Redirect to softbots/models
-GET     softbots/model/:id: - To get a model with id
-DELETE  softbots/model/:id: - To delete a bot with id
+GET     softbots/model/:id - To get a model with id
+DELETE  softbots/model/:id - To delete a bot with id
 
 INSIDE
 ======
-In each bot folder there is data.json which gives the nodes and links data.
-In each model folder there is data.json which gives what scenario the corresponding bot was trained on
+In each bot folder there is bot.json which contains the nodes and links data.
+In each model folder there is model.json which gives what scenario the corresponding bot was trained on
 as well as the bot id of the current model. As well as the pytorch saved model.
 
 STORAGE
@@ -24,9 +26,18 @@ STORAGE
 softbots/
   bots/
     BKLGKJSB/
+      bot.json
     BSLWTKDL/
+      bot.json
     BNHJLZYG/
+      bot.json
   models/
     MFAALWPP/
+      model.json
+      model.pt
     MWQOEOWP/
-    MNVBCNDM/
\ No newline at end of file
+      model.json
+      model.pt
+    MNVBCNDM/
+      model.json
+      model.pt
\ No newline at end of file

commit 614d6712bc28d22d3806e504bec344187fe32398
Author: Elias Dobrin <elias@dobrin.net>
Date:   Sun Jun 12 17:59:15 2022 -0700

    cleanup and moving to GTK gui

diff --git a/main.py b/main.py
index 741e78e..aa71acc 100644
--- a/main.py
+++ b/main.py
@@ -1,177 +1,48 @@
 from math import tau
 import os
-import torch
-import torch.nn as nn
-from sklearn.datasets import make_classification
 import cairo
 import ffmpeg
-from softbots import Softbot, Cartilage, Ligament, Muscle
+from softbodies import Softbody, Node, Link
 from vectors import Vector
 
 camera_position = Vector(0, 0)
 camera_zoom = 1
 
-cartilages = [
-    Cartilage(mass=0.01, position=Vector(0, 0.1258)),
-    Cartilage(mass=0.01, position=Vector(0.2384, 0.3957)),
-    Cartilage(mass=0.01, position=Vector(0.5579, 0.4934)),
-    Cartilage(mass=0.01, position=Vector(0.8030, 0.3957)),
-    Cartilage(mass=0.01, position=Vector(0.9387, 0.2285)),
-    Cartilage(mass=0.01, position=Vector(1, 0.0315)),
-    Cartilage(mass=0.01, position=Vector(0.7317, 0.0132)),
-    Cartilage(mass=0.01, position=Vector(0.5579, 0.1474)),
-    Cartilage(mass=0.01, position=Vector(0.3030, 0)),
+nodes = [
+    Node(mass=0.01, position=Vector(0, 0.1258)),
+    Node(mass=0.01, position=Vector(0.2384, 0.3957)),
+    Node(mass=0.01, position=Vector(0.5579, 0.4934)),
+    Node(mass=0.01, position=Vector(0.8030, 0.3957)),
+    Node(mass=0.01, position=Vector(0.9387, 0.2285)),
+    Node(mass=0.01, position=Vector(1, 0.0315)),
+    Node(mass=0.01, position=Vector(0.7317, 0.0132)),
+    Node(mass=0.01, position=Vector(0.5579, 0.1474)),
+    Node(mass=0.01, position=Vector(0.3030, 0)),
 ]
 
-for cartilage in cartilages:
+links = [
+    Link(nodes=(nodes[0], nodes[1]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[1], nodes[2]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[2], nodes[3]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[3], nodes[4]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[4], nodes[5]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[5], nodes[6]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[6], nodes[7]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[7], nodes[8]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[8], nodes[0]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[1], nodes[8]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[4], nodes[6]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[1], nodes[7]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[2], nodes[7]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[3], nodes[7]), stiffness=200, dampening=1),
+    Link(nodes=(nodes[4], nodes[7]), stiffness=200, dampening=1),
+]
+
+softbody = Softbody(nodes, links)
+
+for cartilage in nodes:
     cartilage.position.x -= 0.5
     cartilage.position.y -= 0.5
-
     cartilage.position /= 2
-
     cartilage.position.y += 0.5
 
-ligaments = [
-    Ligament(cartilages=(cartilages[1], cartilages[7]), stiffness=200, dampening=1),
-    Ligament(cartilages=(cartilages[2], cartilages[7]), stiffness=200, dampening=1),
-    Ligament(cartilages=(cartilages[3], cartilages[7]), stiffness=200, dampening=1),
-    Ligament(cartilages=(cartilages[4], cartilages[7]), stiffness=200, dampening=1),
-]
-
-muscles = [
-    Muscle(cartilages=(cartilages[0], cartilages[1]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[1], cartilages[2]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[2], cartilages[3]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[3], cartilages[4]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[4], cartilages[5]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[5], cartilages[6]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[6], cartilages[7]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[7], cartilages[8]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[8], cartilages[0]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[1], cartilages[8]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[4], cartilages[6]), stiffness=200, dampening=1),
-]
-
-
-softbot = Softbot(cartilages, ligaments, muscles)
-
-initial_center_mass = softbot.get_center_mass()
-time = 10
-step = 0.0005
-
-"""
-os.makedirs("output", exist_ok=True)
-for png in os.scandir("output"):
-    os.remove(png)
-"""
-
-for i in range(int(time / step)):
-    inputs = []
-    for cartilage in cartilages:
-        inputs.append(cartilage.position - softbot.get_center_mass())
-        inputs.append(cartilage.velocity - softbot.get_center_mass_velocity())
-
-    # Reset forces
-    for cartilage in cartilages:
-        cartilage.force.set(Vector(0, 0))
-
-    # Apply ligament forces
-    for ligament in ligaments + muscles:
-        cartilage_1 = ligament.cartilages[0]
-        cartilage_2 = ligament.cartilages[1]
-        vector_ligament = (cartilage_1.position - cartilage_2.position) / Vector.dist(cartilage_1.position, cartilage_2.position)
-        cartilage_1.force.add(ligament.get_force() * vector_ligament)
-        cartilage_2.force.sub(ligament.get_force() * vector_ligament)
-
-    # Apply external forces
-    for cartilage in cartilages:
-        force_gravity = Vector(0, -9.8 * cartilage.mass)
-        cartilage.force.add(force_gravity)
-
-        if cartilage.position.y < 0:
-            force_stiffness = Vector(0, -100 * cartilage.position.y)
-            force_dampening = Vector(0, -1 * cartilage.velocity.y)
-            force_normal = force_stiffness + force_dampening
-            force_friction = Vector(0.25 * force_normal.y, 0)
-            if cartilage.velocity.x > 0:
-                force_friction.x *= -1
-            cartilage.force.add(force_normal)
-            cartilage.force.add(force_friction)
-
-    # Integrate with time, twice
-    for cartilage in cartilages:
-        cartilage.acceleration = cartilage.force / cartilage.mass
-        cartilage.velocity += cartilage.acceleration * step
-        cartilage.position += cartilage.velocity * step
-
-    """
-    camera_position.set(softbot.get_center_mass())
-
-    surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 500, 500)
-    context = cairo.Context(surface)
-    context.scale(500, 500)
-    context.rectangle(0, 0, 1, 1)
-    context.set_source_rgb(0.5, 0.8, 1)
-    context.fill()
-    context.translate(0.5, 0.5)
-    context.scale(1, -1)
-    context.scale(camera_zoom, camera_zoom)
-    context.translate(-camera_position.x, -camera_position.y)
-
-    context.rectangle(-10, -20, 20, 20)
-    context.set_source_rgb(0.6, 1, 0.6)
-    context.fill()
-    context.move_to(-10, 0)
-    context.line_to(10, 0)
-    context.set_source_rgb(0, 0, 0)
-    context.set_line_width(0.02)
-    context.stroke()
-
-    for ligament in ligaments:
-        cartilage_1 = ligament.cartilages[0]
-        cartilage_2 = ligament.cartilages[1]
-        context.move_to(cartilage_1.position.x, cartilage_1.position.y)
-        context.line_to(cartilage_2.position.x, cartilage_2.position.y)
-        context.set_source_rgb(0, 0, 0)
-        context.set_line_width(0.01)
-        context.stroke()
-
-    for muscle in muscles:
-        cartilage_1 = muscle.cartilages[0]
-        cartilage_2 = muscle.cartilages[1]
-        context.move_to(cartilage_1.position.x, cartilage_1.position.y)
-        context.line_to(cartilage_2.position.x, cartilage_2.position.y)
-        context.set_source_rgb(0, 0, 0)
-        context.set_line_width(0.02)
-        context.stroke_preserve()
-        context.set_source_rgb(1, 0.7 * muscle.expansion, 0.7 * muscle.expansion)
-        context.set_line_width(0.01)
-        context.stroke()
-
-    for cartilage in cartilages:
-        context.arc(cartilage.position.x, cartilage.position.y, 0.01, 0, tau)
-        context.set_source_rgb(1, 1, 1)
-        context.fill_preserve()
-        context.set_source_rgb(0, 0, 0)
-        context.set_line_width(0.005)
-        context.stroke()
-
-    surface.write_to_png(f"output/{i:06d}.png")
-    """
-
-distance_traveled = softbot.get_center_mass().x - initial_center_mass.x
-print(distance_traveled)
-
-"""
-ffmpeg.input("output/%06d.png", pattern_type="sequence", framerate=60).output("output.mp4").run(overwrite_output=True)
-for png in os.scandir("output"):
-    os.remove(png)
-os.rmdir("output")
-os.startfile("output.mp4")
-"""
-
-
-class Net(nn):
-    def __init__(self):
-        super().__init__()
-        nn.Linear()
\ No newline at end of file
diff --git a/softbodies.py b/softbodies.py
new file mode 100644
index 0000000..6e7cd0f
--- /dev/null
+++ b/softbodies.py
@@ -0,0 +1,74 @@
+"""Python module for simulating physics of softbodies following Hooke's principles."""
+
+from __future__ import annotations
+from vectors import Vector
+
+
+class Softbody:
+    """An object which encapsulates a set of nodes and links."""
+    nodes: list[Node]
+    links: list[Link]
+
+    def __init__(self, nodes: list[Node], links: list[Link]) -> None:
+        """Create a softbody from a list of nodes and list of links."""
+        self.nodes = nodes
+        self.links = links
+
+
+class Node:
+    """A point mass particle that implements Euler integration."""
+    mass: float
+    position: Vector
+    velocity: Vector
+    acceleration: Vector
+    force: Vector
+
+    def __init__(self, mass: float, position: Vector) -> None:
+        """Create a node from mass and position that is static."""
+        self.mass = mass
+        self.position = position
+        self.velocity = Vector(0, 0)
+        self.acceleration = Vector(0, 0)
+        self.force = Vector(0, 0)
+
+
+class Link:
+    """A massless Hookean spring that features a pair of spring stiffness and dampening forces."""
+    nodes: tuple[Node, Node]
+    length: float
+    stiffness: float
+    dampening: float
+
+    def __init__(self, nodes: tuple[Node, Node], stiffness: float, dampening: float, length: float = None) -> None:
+        """Create a link from a pair of nodes, stiffness coefficient, dampening coefficient and length."""
+        self.nodes = nodes
+        if length is None:
+            self.length = Vector.dist(nodes[0].position, nodes[1].position)
+        else:
+            self.length = length
+        self.stiffness = stiffness
+        self.dampening = dampening
+
+    def get_length(self) -> float:
+        """Get the momentary length of the link."""
+        return Vector.dist(self.nodes[0].position, self.nodes[1].position)
+
+    def get_velocity(self) -> float:
+        """Get the speed of the expansion/contraction of the link (positive/negative)."""
+        return Vector.dot(self.nodes[0].position - self.nodes[1].position, self.nodes[0].velocity - self.nodes[1].velocity) / self.get_length()
+
+    def get_displacement(self) -> float:
+        """Get the expansion/contraction of the link from its resting configuration (positive/negative)."""
+        return self.get_length() - self.length
+
+    def get_stiffness_force(self) -> float:
+        """Get the spring stiffness force expansion/contraction (positive/negative)."""
+        return -self.stiffness * self.get_displacement()
+
+    def get_dampening_force(self) -> float:
+        """Get the spring dampening force expansion/contraction (positive/negative)."""
+        return -self.dampening * self.get_velocity()
+
+    def get_force(self) -> float:
+        """Get the spring force expansion/contraction (positive/negative)."""
+        return self.get_stiffness_force() + self.get_dampening_force()
diff --git a/softbots.py b/softbots.py
deleted file mode 100644
index 4db361d..0000000
--- a/softbots.py
+++ /dev/null
@@ -1,104 +0,0 @@
-from __future__ import annotations
-from vectors import Vector
-
-
-class Softbot:
-    cartilages: list[Cartilage]
-    ligaments: list[Ligament]
-    muscles: list[Muscle]
-
-    def __init__(self, cartilages: list[Cartilage], ligaments: list[Ligament], muscles: list[Muscle]) -> None:
-        self.cartilages = cartilages
-        self.ligaments = ligaments
-        self.muscles = muscles
-
-    def get_total_mass(self) -> float:
-        return sum(cartilage.mass for cartilage in self.cartilages)
-
-    def get_center_mass(self) -> Vector:
-        center_mass = Vector(0, 0)
-        total_mass = self.get_total_mass()
-        for cartilage in self.cartilages:
-            center_mass += cartilage.position * (cartilage.mass / total_mass)
-        return center_mass
-
-    def get_center_mass_velocity(self) -> Vector:
-        center_mass_velocity = Vector(0, 0)
-        total_mass = self.get_total_mass()
-        for cartilage in self.cartilages:
-            center_mass_velocity += cartilage.velocity * (cartilage.mass / total_mass)
-        return center_mass_velocity
-
-    def get_energy(self) -> float:
-        return sum(ligament.get_energy() for ligament in self.ligaments + self.muscles)
-
-
-class Cartilage:
-    """A point mass particle that implements Euler integration."""
-    mass: float
-    position: Vector
-    velocity: Vector
-    acceleration: Vector
-    force: Vector
-
-    def __init__(self, mass: float, position: Vector) -> None:
-        self.mass = mass
-        self.position = position
-        self.velocity = Vector(0, 0)
-        self.acceleration = Vector(0, 0)
-        self.force = Vector(0, 0)
-
-
-class Ligament:
-    """A massless Hookean spring that features a pair of spring stiffness and dampening forces."""
-    cartilages: tuple[Cartilage, Cartilage]
-    length: float
-    stiffness: float
-    dampening: float
-
-    def __init__(self, cartilages: tuple[Cartilage, Cartilage], stiffness: float, dampening: float, length: float = None) -> None:
-        self.cartilages = cartilages
-        if length is None:
-            self.length = Vector.dist(cartilages[0].position, cartilages[1].position)
-        else:
-            self.length = length
-        self.stiffness = stiffness
-        self.dampening = dampening
-
-    def get_length(self) -> float:
-        """Get the momentary length of the link."""
-        return Vector.dist(self.cartilages[0].position, self.cartilages[1].position)
-
-    def get_displacement(self) -> float:
-        """Get the expansion/contraction of the link from its resting configuration (positive/negative)."""
-        return self.get_length() - self.length
-
-    def get_velocity(self) -> float:
-        """Get the speed of the expansion/contraction of the link (positive/negative)."""
-        return Vector.dot(self.cartilages[0].position - self.cartilages[1].position, self.cartilages[0].velocity - self.cartilages[1].velocity) / self.get_length()
-
-    def get_force(self) -> float:
-        """Get the spring force expansion/contraction (positive/negative)."""
-        return self.get_force_stiffness() + self.get_force_dampening()
-
-    def get_force_stiffness(self) -> float:
-        """Get the spring stiffness force expansion/contraction (positive/negative)."""
-        return -self.stiffness * self.get_displacement()
-
-    def get_force_dampening(self) -> float:
-        """Get the spring dampening force expansion/contraction (positive/negative)."""
-        return -self.dampening * self.get_velocity()
-
-    def get_energy(self) -> float:
-        return 0.5 * self.stiffness * self.get_displacement() ** 2
-
-
-class Muscle(Ligament):
-    expansion: float
-
-    def __init__(self, cartilages: tuple[Cartilage, Cartilage], stiffness: float, dampening: float, length: float = None) -> None:
-        super().__init__(cartilages, stiffness, dampening, length)
-        self.expansion = 1
-
-    def get_displacement(self) -> float:
-        return self.get_length() - self.length * self.expansion
diff --git a/vectors.py b/vectors.py
index 5127898..ff5b6bf 100644
--- a/vectors.py
+++ b/vectors.py
@@ -1,4 +1,4 @@
-"""Python module for dealing with two-dimensional cartesian coordinates and vector operations."""
+"""Python module for dealing with two-dimensional vectors."""
 
 from __future__ import annotations
 from math import hypot
@@ -23,39 +23,39 @@ class Vector:
     def __str__(self) -> str:
         return f"({self.x}, {self.y})"
 
-    def __add__(self, vector: Vector) -> Vector:
+    def __add__(self, vector: Vector, /) -> Vector:
         """(+) Add caller vector with parameter vector, without modification to vector."""
         return self.copy().add(vector)
 
-    def __iadd__(self, vector: Vector) -> Vector:
+    def __iadd__(self, vector: Vector, /) -> Vector:
         """(+=) Add caller vector with parameter vector, with modification to caller vector."""
         return self.add(vector)
 
-    def __sub__(self, vector: Vector) -> Vector:
+    def __sub__(self, vector: Vector, /) -> Vector:
         """(-) Subtract parameter vector from caller vector, without modification to vector."""
         return self.copy().sub(vector)
 
-    def __isub__(self, vector: Vector) -> Vector:
+    def __isub__(self, vector: Vector, /) -> Vector:
         """(-=) Subtract parameter vector from caller vector, with modification to caller vector."""
         return self.sub(vector)
 
-    def __mul__(self, multiplier: float) -> Vector:
+    def __mul__(self, multiplier: float, /) -> Vector:
         """(*) Multiply vector coordinates by a number, without modification to vector."""
         return self.copy().mul(multiplier)
 
-    def __rmul__(self, multiplier: float) -> Vector:
+    def __rmul__(self, multiplier: float, /) -> Vector:
         """(*) Multiply vector coordinates by a number, without modification to vector."""
         return self.copy().mul(multiplier)
 
-    def __imul__(self, multiplier: float) -> Vector:
+    def __imul__(self, multiplier: float, /) -> Vector:
         """(*=) Multiply vector coordinates by a number, with modification to vector."""
         return self.mul(multiplier)
 
-    def __truediv__(self, divisor: float) -> Vector:
+    def __truediv__(self, divisor: float, /) -> Vector:
         """(/) Divide vector coordinates by a number, without modification to vector."""
         return self.copy().div(divisor)
 
-    def __itruediv__(self, divisor: float) -> Vector:
+    def __itruediv__(self, divisor: float, /) -> Vector:
         """(/=) Divide vector coordinates by a number, with modification to vector."""
         return self.div(divisor)
 
@@ -67,39 +67,39 @@ class Vector:
         """(-) Flip the sign of vector coordinates, without modification to vector."""
         return self.copy().mul(-1)
 
-    def __matmul__(self, vector: Vector) -> float:
+    def __matmul__(self, vector: Vector, /) -> float:
         """(@) Find the dot product of two vectors as vectors."""
         return self.dot(vector)
 
-    def __mod__(self, vector: Vector) -> float:
+    def __mod__(self, vector: Vector, /) -> float:
         """(%) Find the cross product of two vectors as vectors."""
         return self.cross(vector)
 
-    def set(self, vector: Vector) -> Vector:
+    def set(self, vector: Vector, /) -> Vector:
         """Set coordinates of caller vector to match parameter vector."""
         self.x = vector.x
         self.y = vector.y
         return self
 
-    def add(self, vector: Vector) -> Vector:
+    def add(self, vector: Vector, /) -> Vector:
         """Add caller vector with parameter vector, with modification to caller vector."""
         self.x += vector.x
         self.y += vector.y
         return self
 
-    def sub(self, vector: Vector) -> Vector:
+    def sub(self, vector: Vector, /) -> Vector:
         """Subtract parameter vector from caller vector, with modification to caller vector."""
         self.x -= vector.x
         self.y -= vector.y
         return self
 
-    def mul(self, multiplier: float) -> Vector:
+    def mul(self, multiplier: float, /) -> Vector:
         """Multiply vector coordinates by a number, with modification to vector."""
         self.x *= multiplier
         self.y *= multiplier
         return self
 
-    def div(self, divisor: float) -> Vector:
+    def div(self, divisor: float, /) -> Vector:
         """Divide vector coordinates by a number, with modification to vector."""
         self.x /= divisor
         self.y /= divisor
@@ -109,18 +109,24 @@ class Vector:
         """Find the distance to the origin."""
         return hypot(self.x, self.y)
 
-    def dist(self, vector: Vector) -> float:
+    def dist(self, vector: Vector, /) -> float:
         """Find the distance between two vectors."""
         return hypot(self.x - vector.x, self.y - vector.y)
 
-    def dot(self, vector: Vector) -> float:
+    def dot(self, vector: Vector, /) -> float:
         """Find the dot product of two vectors."""
         return self.x * vector.x + self.y * vector.y
 
-    def cross(self, vector: Vector) -> float:
+    def cross(self, vector: Vector, /) -> float:
         """Find the cross product of two vectors."""
         return self.x * vector.y - self.y * vector.x
 
     def copy(self) -> Vector:
         """Copy the vector instance."""
         return Vector(self.x, self.y)
+
+
+if __name__ == "__main__":
+    from time import sleep
+    print("Do not run me! This is just a dependency program")
+    sleep(5)
\ No newline at end of file

commit 894a8963720dcd258c822f08983ed9ca5fe128b0
Author: Elias Dobrin <elias@dobrin.net>
Date:   Thu Jun 9 12:15:12 2022 -0700

    not sure what to do

diff --git a/main.py b/main.py
index a2b9823..741e78e 100644
--- a/main.py
+++ b/main.py
@@ -1,5 +1,8 @@
 from math import tau
 import os
+import torch
+import torch.nn as nn
+from sklearn.datasets import make_classification
 import cairo
 import ffmpeg
 from softbots import Softbot, Cartilage, Ligament, Muscle
@@ -165,4 +168,10 @@ for png in os.scandir("output"):
     os.remove(png)
 os.rmdir("output")
 os.startfile("output.mp4")
-"""
\ No newline at end of file
+"""
+
+
+class Net(nn):
+    def __init__(self):
+        super().__init__()
+        nn.Linear()
\ No newline at end of file

commit 81617bc3093ddab53bfad111f789f054ff23dbf5
Author: Elias Dobrin <elias@dobrin.net>
Date:   Thu Jun 9 12:04:14 2022 -0700

    added nn parameters

diff --git a/main.py b/main.py
index 0b6e540..a2b9823 100644
--- a/main.py
+++ b/main.py
@@ -52,47 +52,57 @@ muscles = [
 
 softbot = Softbot(cartilages, ligaments, muscles)
 
+initial_center_mass = softbot.get_center_mass()
+time = 10
+step = 0.0005
+
+"""
 os.makedirs("output", exist_ok=True)
 for png in os.scandir("output"):
     os.remove(png)
+"""
+
+for i in range(int(time / step)):
+    inputs = []
+    for cartilage in cartilages:
+        inputs.append(cartilage.position - softbot.get_center_mass())
+        inputs.append(cartilage.velocity - softbot.get_center_mass_velocity())
+
+    # Reset forces
+    for cartilage in cartilages:
+        cartilage.force.set(Vector(0, 0))
+
+    # Apply ligament forces
+    for ligament in ligaments + muscles:
+        cartilage_1 = ligament.cartilages[0]
+        cartilage_2 = ligament.cartilages[1]
+        vector_ligament = (cartilage_1.position - cartilage_2.position) / Vector.dist(cartilage_1.position, cartilage_2.position)
+        cartilage_1.force.add(ligament.get_force() * vector_ligament)
+        cartilage_2.force.sub(ligament.get_force() * vector_ligament)
+
+    # Apply external forces
+    for cartilage in cartilages:
+        force_gravity = Vector(0, -9.8 * cartilage.mass)
+        cartilage.force.add(force_gravity)
+
+        if cartilage.position.y < 0:
+            force_stiffness = Vector(0, -100 * cartilage.position.y)
+            force_dampening = Vector(0, -1 * cartilage.velocity.y)
+            force_normal = force_stiffness + force_dampening
+            force_friction = Vector(0.25 * force_normal.y, 0)
+            if cartilage.velocity.x > 0:
+                force_friction.x *= -1
+            cartilage.force.add(force_normal)
+            cartilage.force.add(force_friction)
+
+    # Integrate with time, twice
+    for cartilage in cartilages:
+        cartilage.acceleration = cartilage.force / cartilage.mass
+        cartilage.velocity += cartilage.acceleration * step
+        cartilage.position += cartilage.velocity * step
 
-for i in range(500):
-    if i % 100 == 99:
-        muscles[0].expansion = (1.7 - muscles[0].expansion)
-
-    for k in range(10):
-        # Reset forces
-        for cartilage in cartilages:
-            cartilage.force.set(Vector(0, 0))
-
-        # Apply ligament forces
-        for ligament in ligaments + muscles:
-            cartilage_1 = ligament.cartilages[0]
-            cartilage_2 = ligament.cartilages[1]
-            vector_ligament = (cartilage_1.position - cartilage_2.position) / Vector.dist(cartilage_1.position, cartilage_2.position)
-            cartilage_1.force.add(ligament.get_force() * vector_ligament)
-            cartilage_2.force.sub(ligament.get_force() * vector_ligament)
-
-        # Apply external forces
-        for cartilage in cartilages:
-            force_gravity = Vector(0, -9.8 * cartilage.mass)
-            cartilage.force.add(force_gravity)
-
-            if cartilage.position.y < 0:
-                force_stiffness = Vector(0, -100 * cartilage.position.y)
-                force_dampening = Vector(0, -1 * cartilage.velocity.y)
-                force_normal = force_stiffness + force_dampening
-                force_friction = Vector(0.25 * force_normal.y, 0)
-                if cartilage.velocity.x > 0:
-                    force_friction.x *= -1
-                cartilage.force.add(force_normal)
-                cartilage.force.add(force_friction)
-
-        # Integrate with time, twice
-        for cartilage in cartilages:
-            cartilage.acceleration = cartilage.force / cartilage.mass
-            cartilage.velocity += cartilage.acceleration * 0.0005
-            cartilage.position += cartilage.velocity * 0.0005
+    """
+    camera_position.set(softbot.get_center_mass())
 
     surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 500, 500)
     context = cairo.Context(surface)
@@ -103,7 +113,7 @@ for i in range(500):
     context.translate(0.5, 0.5)
     context.scale(1, -1)
     context.scale(camera_zoom, camera_zoom)
-    context.translate(camera_position.x, camera_position.y)
+    context.translate(-camera_position.x, -camera_position.y)
 
     context.rectangle(-10, -20, 20, 20)
     context.set_source_rgb(0.6, 1, 0.6)
@@ -144,10 +154,15 @@ for i in range(500):
         context.stroke()
 
     surface.write_to_png(f"output/{i:06d}.png")
+    """
 
+distance_traveled = softbot.get_center_mass().x - initial_center_mass.x
+print(distance_traveled)
 
+"""
 ffmpeg.input("output/%06d.png", pattern_type="sequence", framerate=60).output("output.mp4").run(overwrite_output=True)
 for png in os.scandir("output"):
     os.remove(png)
 os.rmdir("output")
-os.startfile("output.mp4")
\ No newline at end of file
+os.startfile("output.mp4")
+"""
\ No newline at end of file
diff --git a/softbots.py b/softbots.py
index 19ee0a7..4db361d 100644
--- a/softbots.py
+++ b/softbots.py
@@ -12,12 +12,23 @@ class Softbot:
         self.ligaments = ligaments
         self.muscles = muscles
 
+    def get_total_mass(self) -> float:
+        return sum(cartilage.mass for cartilage in self.cartilages)
+
     def get_center_mass(self) -> Vector:
         center_mass = Vector(0, 0)
+        total_mass = self.get_total_mass()
         for cartilage in self.cartilages:
-            center_mass += cartilage.position * cartilage.mass
+            center_mass += cartilage.position * (cartilage.mass / total_mass)
         return center_mass
 
+    def get_center_mass_velocity(self) -> Vector:
+        center_mass_velocity = Vector(0, 0)
+        total_mass = self.get_total_mass()
+        for cartilage in self.cartilages:
+            center_mass_velocity += cartilage.velocity * (cartilage.mass / total_mass)
+        return center_mass_velocity
+
     def get_energy(self) -> float:
         return sum(ligament.get_energy() for ligament in self.ligaments + self.muscles)
 

commit 8c7b0604e94eded97a750b33b372c6bf1a2a77ff
Author: Elias Dobrin <elias@dobrin.net>
Date:   Thu Jun 9 11:21:06 2022 -0700

    Update .gitignore

diff --git a/.gitignore b/.gitignore
index 288aae9..09a21f2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,4 @@
-
+output.mp4
 
 # Byte-compiled / optimized / DLL files
 __pycache__/

commit 0a92951ce8506e17f062e83697f5cafbd740b226
Author: Elias Dobrin <elias@dobrin.net>
Date:   Thu Jun 9 11:20:36 2022 -0700

    cleanup

diff --git a/.gitignore b/.gitignore
index b6e4761..288aae9 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,5 @@
+
+
 # Byte-compiled / optimized / DLL files
 __pycache__/
 *.py[cod]
diff --git a/main.py b/main.py
index 436524b..0b6e540 100644
--- a/main.py
+++ b/main.py
@@ -50,7 +50,7 @@ muscles = [
 ]
 
 
-softbody = Softbot(cartilages, ligaments, muscles)
+softbot = Softbot(cartilages, ligaments, muscles)
 
 os.makedirs("output", exist_ok=True)
 for png in os.scandir("output"):
diff --git a/output.mp4 b/output.mp4
deleted file mode 100644
index f3fe1c9..0000000
Binary files a/output.mp4 and /dev/null differ

commit 9b713b4dda3809ee8b705cd19c2154dec7e28791
Author: Elias Dobrin <elias@dobrin.net>
Date:   Thu Jun 9 11:18:49 2022 -0700

    added additional center mass and potential energy methods

diff --git a/main.py b/main.py
index a7039cc..436524b 100644
--- a/main.py
+++ b/main.py
@@ -58,7 +58,7 @@ for png in os.scandir("output"):
 
 for i in range(500):
     if i % 100 == 99:
-        muscles[0].activation = (0.3 - muscles[0].activation)
+        muscles[0].expansion = (1.7 - muscles[0].expansion)
 
     for k in range(10):
         # Reset forces
@@ -131,7 +131,7 @@ for i in range(500):
         context.set_source_rgb(0, 0, 0)
         context.set_line_width(0.02)
         context.stroke_preserve()
-        context.set_source_rgb(1, 0.7 * (1 - muscle.activation), 0.7 * (1 - muscle.activation))
+        context.set_source_rgb(1, 0.7 * muscle.expansion, 0.7 * muscle.expansion)
         context.set_line_width(0.01)
         context.stroke()
 
@@ -146,7 +146,6 @@ for i in range(500):
     surface.write_to_png(f"output/{i:06d}.png")
 
 
-
 ffmpeg.input("output/%06d.png", pattern_type="sequence", framerate=60).output("output.mp4").run(overwrite_output=True)
 for png in os.scandir("output"):
     os.remove(png)
diff --git a/output.mp4 b/output.mp4
new file mode 100644
index 0000000..f3fe1c9
Binary files /dev/null and b/output.mp4 differ
diff --git a/sb_square_launch.py b/sb_square_launch.py
deleted file mode 100644
index 67b9e4e..0000000
--- a/sb_square_launch.py
+++ /dev/null
@@ -1,121 +0,0 @@
-import os
-from math import pi, tau
-from time import sleep
-import cairo
-import ffmpeg
-from structures import Tower
-from vectors import Vector
-
-print("This program will simulate the physics of a softbody square mesh.")
-sleep(1)
-print("The object is dropped from a height of 0.5 meters and is then launched diagonally.\n")
-sleep(1)
-
-print("Enter the number of lateral grid elements in the mesh.")
-grid_x = 1
-while True:
-    try:
-        grid_x = int(input("[1-7]: "))
-        assert 1 <= grid_x <= 7
-        break
-    except:
-        continue
-
-print("Enter the number of medial grid elements in the mesh.")
-grid_y = 1
-while True:
-    try:
-        grid_y = int(input("[1-7]: "))
-        assert 1 <= grid_y <= 7
-        break
-    except:
-        continue
-
-print("Solving differential equations...")
-
-structure = Tower(width=0.1 * grid_x, height=0.1 * grid_y, grid=(grid_x, grid_y), mass=0.1, stiffness=50, dampening=1)
-structure.translate(Vector(0.5, 0.5))
-structure.rotate(pi / 12, center=Vector(0.5, 0.5))
-nodes, links = structure.get_components()
-
-camera_position = Vector(0.5, 0.5)
-camera_zoom = 0.9
-
-
-os.makedirs("output", exist_ok=True)
-for png in os.scandir("output"):
-    os.remove(png)
-
-for i in range(250):
-    if i == 100:
-        for node in nodes:
-            node.velocity.x += 3
-            node.velocity.y += 5
-
-    for s in range(10):
-        for node in nodes:
-            node.force.set(Vector(0, -9.8 * node.mass))
-        for link in links:
-            link.cartilages[0].force.add(link.get_force() * (link.cartilages[0].position - link.cartilages[1].position) / Vector.dist(
-                link.cartilages[0].position, link.cartilages[1].position))
-            link.cartilages[1].force.add(link.get_force() * (link.cartilages[1].position - link.cartilages[0].position) / Vector.dist(
-                link.cartilages[0].position, link.cartilages[1].position))
-
-        for node in nodes:
-            force_normal = Vector(0, 0)
-            if node.position.x < 0:
-                force_normal.x += 100 * abs(node.position.x)
-            elif node.position.x > 1:
-                force_normal.x -= 100 * abs(1 - node.position.x)
-            if node.position.y < 0:
-                force_normal.y += 100 * abs(node.position.y)
-            elif node.position.y > 1:
-                force_normal.y -= 100 * abs(1 - node.position.y)
-            try:
-                force_friction = -0.25 * force_normal.len() * (node.velocity / node.velocity.len())
-            except ZeroDivisionError:
-                force_friction = Vector(0, 0)
-            node.force += force_normal + force_friction
-
-        for node in nodes:
-            node.integrate(time=0.0005)
-
-    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 500, 500)
-    context = cairo.Context(surface)
-    context.scale(500, 500)
-    context.rectangle(0, 0, 1, 1)
-    context.set_source_rgb(1, 1, 1)
-    context.fill()
-    context.translate(0.5, 0.5)
-    context.scale(1, -1)
-    context.scale(camera_zoom, camera_zoom)
-    context.translate(-camera_position.x, -camera_position.y)
-
-    context.rectangle(0, 0, 1, 1)
-    context.set_source_rgb(0, 0, 0)
-    context.set_line_width(0.01)
-    context.stroke()
-
-    for link in links:
-        context.move_to(link.cartilages[0].position.x, link.cartilages[0].position.y)
-        context.line_to(link.cartilages[1].position.x, link.cartilages[1].position.y)
-        context.set_source_rgb(0, 0, 0)
-        context.set_line_width(0.01 * (link.length / link.get_length()))
-        context.stroke()
-
-    for node in nodes:
-        amt = node.velocity.len()
-        context.arc(node.position.x, node.position.y, 0.01, 0, tau)
-        context.set_source_rgb(1, 1 - amt / 5, 1 - amt / 5)
-        context.fill_preserve()
-        context.set_source_rgb(0, 0, 0)
-        context.set_line_width(0.005)
-        context.stroke()
-
-    surface.write_to_png(f"output/{i:06d}.png")
-
-ffmpeg.input("output/%06d.png", pattern_type="sequence", framerate=60).output("output.mp4").run(overwrite_output=True)
-for png in os.scandir("output"):
-    os.remove(png)
-os.rmdir("output")
-os.startfile("output.mp4")
\ No newline at end of file
diff --git a/softbots.py b/softbots.py
index 075cfed..19ee0a7 100644
--- a/softbots.py
+++ b/softbots.py
@@ -12,6 +12,15 @@ class Softbot:
         self.ligaments = ligaments
         self.muscles = muscles
 
+    def get_center_mass(self) -> Vector:
+        center_mass = Vector(0, 0)
+        for cartilage in self.cartilages:
+            center_mass += cartilage.position * cartilage.mass
+        return center_mass
+
+    def get_energy(self) -> float:
+        return sum(ligament.get_energy() for ligament in self.ligaments + self.muscles)
+
 
 class Cartilage:
     """A point mass particle that implements Euler integration."""
@@ -69,13 +78,16 @@ class Ligament:
         """Get the spring dampening force expansion/contraction (positive/negative)."""
         return -self.dampening * self.get_velocity()
 
+    def get_energy(self) -> float:
+        return 0.5 * self.stiffness * self.get_displacement() ** 2
+
 
 class Muscle(Ligament):
-    activation: float
+    expansion: float
 
     def __init__(self, cartilages: tuple[Cartilage, Cartilage], stiffness: float, dampening: float, length: float = None) -> None:
         super().__init__(cartilages, stiffness, dampening, length)
-        self.activation = 0
+        self.expansion = 1
 
     def get_displacement(self) -> float:
-        return self.get_length() - self.length * (1 - self.activation)
+        return self.get_length() - self.length * self.expansion

commit 9140abb57497378a43bf5928cbe33937ba5008d2
Author: Elias Dobrin <elias@dobrin.net>
Date:   Thu Jun 9 10:58:01 2022 -0700

    updated service.txt

diff --git a/service.txt b/service.txt
index 0bc4a48..c975775 100644
--- a/service.txt
+++ b/service.txt
@@ -1,21 +1,32 @@
+SCENARIOS
+=========
+
+
 API
 ===
-POST   softbots/bot - To create a bot with JSON input of nodes and links
-GET    softbots/bot - Redirect to softbots/bots
-GET    softbots/bot/:id: - To get a bot with id
-DELETE softbots/bot/:id: - To delete a bot with id
-POST   softbots/model - To train and save a model with JSON input of training parameters
-GET    softbots/model - Redirect to softbots/models
-GET    softbots/model/:id: - To get a model with id
-DELETE softbots/model/:id: - To delete a bot with id
+POST    softbots/bot - To create a bot with JSON input of nodes and links
+GET     softbots/bot - Redirect to softbots/bots
+GET     softbots/bot/:id: - To get a bot with id
+DELETE  softbots/bot/:id: - To delete a bot with id
+PUT     softbots/model - To train and save a model with JSON input of training parameters
+GET     softbots/model - Redirect to softbots/models
+GET     softbots/model/:id: - To get a model with id
+DELETE  softbots/model/:id: - To delete a bot with id
 
+INSIDE
+======
+In each bot folder there is data.json which gives the nodes and links data.
+In each model folder there is data.json which gives what scenario the corresponding bot was trained on
+as well as the bot id of the current model. As well as the pytorch saved model.
 
 STORAGE
-=========
+=======
 softbots/
   bots/
     BKLGKJSB/
     BSLWTKDL/
     BNHJLZYG/
   models/
-    M
\ No newline at end of file
+    MFAALWPP/
+    MWQOEOWP/
+    MNVBCNDM/
\ No newline at end of file

commit 6c1378beb16a51b2cd48b7417b5ba8c4b964b887
Author: Elias Dobrin <elias@dobrin.net>
Date:   Wed Jun 8 10:30:04 2022 -0700

    added model endpoints as well

diff --git a/service.txt b/service.txt
index d99ab87..0bc4a48 100644
--- a/service.txt
+++ b/service.txt
@@ -1,12 +1,16 @@
 API
 ===
-POST   softbots/api/bot - To create a bot with JSON input
-GET    softbots/api/bot/:id: - To get a bot with id
-DELETE softbots/api/bot/:id: - To delete a bot with id
-softbots/api/models
+POST   softbots/bot - To create a bot with JSON input of nodes and links
+GET    softbots/bot - Redirect to softbots/bots
+GET    softbots/bot/:id: - To get a bot with id
+DELETE softbots/bot/:id: - To delete a bot with id
+POST   softbots/model - To train and save a model with JSON input of training parameters
+GET    softbots/model - Redirect to softbots/models
+GET    softbots/model/:id: - To get a model with id
+DELETE softbots/model/:id: - To delete a bot with id
 
 
-ENDPOINTS
+STORAGE
 =========
 softbots/
   bots/

commit b2cf78e95d5e566f77d8bd67e7c214cc008fa74f
Author: Elias Dobrin <elias@dobrin.net>
Date:   Wed Jun 8 10:15:49 2022 -0700

    added api endpoints

diff --git a/service.txt b/service.txt
index d8fee03..d99ab87 100644
--- a/service.txt
+++ b/service.txt
@@ -1,7 +1,17 @@
-Endpoints
+API
+===
+POST   softbots/api/bot - To create a bot with JSON input
+GET    softbots/api/bot/:id: - To get a bot with id
+DELETE softbots/api/bot/:id: - To delete a bot with id
+softbots/api/models
 
+
+ENDPOINTS
+=========
 softbots/
   bots/
-    KLJGFLKJSB/
-    SLWPCNTKDL/
-    NMSHJLSZYG/
\ No newline at end of file
+    BKLGKJSB/
+    BSLWTKDL/
+    BNHJLZYG/
+  models/
+    M
\ No newline at end of file

commit 334c4d1ba672ae38607de912213781f0ff94b83a
Author: Elias Dobrin <elias@dobrin.net>
Date:   Wed Jun 8 09:54:58 2022 -0700

    working on service layout

diff --git a/service.txt b/service.txt
new file mode 100644
index 0000000..d8fee03
--- /dev/null
+++ b/service.txt
@@ -0,0 +1,7 @@
+Endpoints
+
+softbots/
+  bots/
+    KLJGFLKJSB/
+    SLWPCNTKDL/
+    NMSHJLSZYG/
\ No newline at end of file

commit fb5e7813e08ff5d18bf974a8e27e131269d1d585
Author: Elias <elias@dobrin.net>
Date:   Mon Jun 6 13:44:44 2022 -0700

    model working

diff --git a/main.py b/main.py
index 17ee3c8..a7039cc 100644
--- a/main.py
+++ b/main.py
@@ -30,7 +30,9 @@ for cartilage in cartilages:
 
 ligaments = [
     Ligament(cartilages=(cartilages[1], cartilages[7]), stiffness=200, dampening=1),
+    Ligament(cartilages=(cartilages[2], cartilages[7]), stiffness=200, dampening=1),
     Ligament(cartilages=(cartilages[3], cartilages[7]), stiffness=200, dampening=1),
+    Ligament(cartilages=(cartilages[4], cartilages[7]), stiffness=200, dampening=1),
 ]
 
 muscles = [
@@ -43,8 +45,8 @@ muscles = [
     Muscle(cartilages=(cartilages[6], cartilages[7]), stiffness=200, dampening=1),
     Muscle(cartilages=(cartilages[7], cartilages[8]), stiffness=200, dampening=1),
     Muscle(cartilages=(cartilages[8], cartilages[0]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[1], cartilages[8]), stiffness=50, dampening=1),
-    Muscle(cartilages=(cartilages[4], cartilages[6]), stiffness=50, dampening=1),
+    Muscle(cartilages=(cartilages[1], cartilages[8]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[4], cartilages[6]), stiffness=200, dampening=1),
 ]
 
 
@@ -56,7 +58,7 @@ for png in os.scandir("output"):
 
 for i in range(500):
     if i % 100 == 99:
-        muscles[3].activation = (0.7 - muscles[3].activation)
+        muscles[0].activation = (0.3 - muscles[0].activation)
 
     for k in range(10):
         # Reset forces
@@ -77,7 +79,7 @@ for i in range(500):
             cartilage.force.add(force_gravity)
 
             if cartilage.position.y < 0:
-                force_stiffness = Vector(0, -10 * cartilage.position.y)
+                force_stiffness = Vector(0, -100 * cartilage.position.y)
                 force_dampening = Vector(0, -1 * cartilage.velocity.y)
                 force_normal = force_stiffness + force_dampening
                 force_friction = Vector(0.25 * force_normal.y, 0)
@@ -96,7 +98,7 @@ for i in range(500):
     context = cairo.Context(surface)
     context.scale(500, 500)
     context.rectangle(0, 0, 1, 1)
-    context.set_source_rgb(1, 1, 1)
+    context.set_source_rgb(0.5, 0.8, 1)
     context.fill()
     context.translate(0.5, 0.5)
     context.scale(1, -1)
@@ -104,7 +106,7 @@ for i in range(500):
     context.translate(camera_position.x, camera_position.y)
 
     context.rectangle(-10, -20, 20, 20)
-    context.set_source_rgb(0.2, 0, 0)
+    context.set_source_rgb(0.6, 1, 0.6)
     context.fill()
     context.move_to(-10, 0)
     context.line_to(10, 0)

commit b00c69ca1fb4398f359128a720d36c947da9011b
Author: Elias <elias@dobrin.net>
Date:   Sun Jun 5 22:12:47 2022 -0700

    nothing

diff --git a/main.py b/main.py
index c056a19..17ee3c8 100644
--- a/main.py
+++ b/main.py
@@ -9,17 +9,25 @@ camera_position = Vector(0, 0)
 camera_zoom = 1
 
 cartilages = [
-    Cartilage(mass=0.1, position=Vector(0, 0.1258)),
-    Cartilage(mass=0.1, position=Vector(0.2384, 0.3957)),
-    Cartilage(mass=0.1, position=Vector(0.5579, 0.4934)),
-    Cartilage(mass=0.1, position=Vector(0.8030, 0.3957)),
-    Cartilage(mass=0.1, position=Vector(0.9387, 0.2285)),
-    Cartilage(mass=0.1, position=Vector(1, 0.0315)),
-    Cartilage(mass=0.1, position=Vector(0.7317, 0.0132)),
-    Cartilage(mass=0.1, position=Vector(0.5579, 0.1474)),
-    Cartilage(mass=0.1, position=Vector(0.3030, 0)),
+    Cartilage(mass=0.01, position=Vector(0, 0.1258)),
+    Cartilage(mass=0.01, position=Vector(0.2384, 0.3957)),
+    Cartilage(mass=0.01, position=Vector(0.5579, 0.4934)),
+    Cartilage(mass=0.01, position=Vector(0.8030, 0.3957)),
+    Cartilage(mass=0.01, position=Vector(0.9387, 0.2285)),
+    Cartilage(mass=0.01, position=Vector(1, 0.0315)),
+    Cartilage(mass=0.01, position=Vector(0.7317, 0.0132)),
+    Cartilage(mass=0.01, position=Vector(0.5579, 0.1474)),
+    Cartilage(mass=0.01, position=Vector(0.3030, 0)),
 ]
 
+for cartilage in cartilages:
+    cartilage.position.x -= 0.5
+    cartilage.position.y -= 0.5
+
+    cartilage.position /= 2
+
+    cartilage.position.y += 0.5
+
 ligaments = [
     Ligament(cartilages=(cartilages[1], cartilages[7]), stiffness=200, dampening=1),
     Ligament(cartilages=(cartilages[3], cartilages[7]), stiffness=200, dampening=1),
@@ -35,8 +43,8 @@ muscles = [
     Muscle(cartilages=(cartilages[6], cartilages[7]), stiffness=200, dampening=1),
     Muscle(cartilages=(cartilages[7], cartilages[8]), stiffness=200, dampening=1),
     Muscle(cartilages=(cartilages[8], cartilages[0]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[1], cartilages[8]), stiffness=200, dampening=1),
-    Muscle(cartilages=(cartilages[4], cartilages[6]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[1], cartilages[8]), stiffness=50, dampening=1),
+    Muscle(cartilages=(cartilages[4], cartilages[6]), stiffness=50, dampening=1),
 ]
 
 
@@ -69,7 +77,7 @@ for i in range(500):
             cartilage.force.add(force_gravity)
 
             if cartilage.position.y < 0:
-                force_stiffness = Vector(0, -200 * cartilage.position.y)
+                force_stiffness = Vector(0, -10 * cartilage.position.y)
                 force_dampening = Vector(0, -1 * cartilage.velocity.y)
                 force_normal = force_stiffness + force_dampening
                 force_friction = Vector(0.25 * force_normal.y, 0)

commit 4cc3064db70baebda1c1c59ff7e5fab929c8fce5
Author: Elias <elias@dobrin.net>
Date:   Sun Jun 5 22:08:17 2022 -0700

    made creature but untested

diff --git a/main.py b/main.py
index 8ad7e81..c056a19 100644
--- a/main.py
+++ b/main.py
@@ -9,22 +9,34 @@ camera_position = Vector(0, 0)
 camera_zoom = 1
 
 cartilages = [
-    Cartilage(mass=0.1, position=Vector(0, 0)),
-    Cartilage(mass=0.1, position=Vector(0.2, 0)),
-    Cartilage(mass=0.1, position=Vector(0.2, 0.2)),
-    Cartilage(mass=0.1, position=Vector(0, 0.2)),
+    Cartilage(mass=0.1, position=Vector(0, 0.1258)),
+    Cartilage(mass=0.1, position=Vector(0.2384, 0.3957)),
+    Cartilage(mass=0.1, position=Vector(0.5579, 0.4934)),
+    Cartilage(mass=0.1, position=Vector(0.8030, 0.3957)),
+    Cartilage(mass=0.1, position=Vector(0.9387, 0.2285)),
+    Cartilage(mass=0.1, position=Vector(1, 0.0315)),
+    Cartilage(mass=0.1, position=Vector(0.7317, 0.0132)),
+    Cartilage(mass=0.1, position=Vector(0.5579, 0.1474)),
+    Cartilage(mass=0.1, position=Vector(0.3030, 0)),
 ]
 
 ligaments = [
-    Ligament(cartilages=(cartilages[0], cartilages[2]), stiffness=50, dampening=1),
-    Ligament(cartilages=(cartilages[1], cartilages[3]), stiffness=50, dampening=1),
+    Ligament(cartilages=(cartilages[1], cartilages[7]), stiffness=200, dampening=1),
+    Ligament(cartilages=(cartilages[3], cartilages[7]), stiffness=200, dampening=1),
 ]
 
 muscles = [
-    Muscle(cartilages=(cartilages[0], cartilages[1]), stiffness=50, dampening=1),
-    Muscle(cartilages=(cartilages[1], cartilages[2]), stiffness=50, dampening=1),
-    Muscle(cartilages=(cartilages[2], cartilages[3]), stiffness=50, dampening=1),
-    Muscle(cartilages=(cartilages[3], cartilages[0]), stiffness=50, dampening=1),
+    Muscle(cartilages=(cartilages[0], cartilages[1]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[1], cartilages[2]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[2], cartilages[3]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[3], cartilages[4]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[4], cartilages[5]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[5], cartilages[6]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[6], cartilages[7]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[7], cartilages[8]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[8], cartilages[0]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[1], cartilages[8]), stiffness=200, dampening=1),
+    Muscle(cartilages=(cartilages[4], cartilages[6]), stiffness=200, dampening=1),
 ]
 
 
@@ -57,7 +69,9 @@ for i in range(500):
             cartilage.force.add(force_gravity)
 
             if cartilage.position.y < 0:
-                force_normal = Vector(0, 200 * abs(force_gravity.y) * abs(cartilage.position.y))
+                force_stiffness = Vector(0, -200 * cartilage.position.y)
+                force_dampening = Vector(0, -1 * cartilage.velocity.y)
+                force_normal = force_stiffness + force_dampening
                 force_friction = Vector(0.25 * force_normal.y, 0)
                 if cartilage.velocity.x > 0:
                     force_friction.x *= -1
@@ -81,6 +95,9 @@ for i in range(500):
     context.scale(camera_zoom, camera_zoom)
     context.translate(camera_position.x, camera_position.y)
 
+    context.rectangle(-10, -20, 20, 20)
+    context.set_source_rgb(0.2, 0, 0)
+    context.fill()
     context.move_to(-10, 0)
     context.line_to(10, 0)
     context.set_source_rgb(0, 0, 0)

commit b165401ffd028b5c1bb37d4133d1f213123e13d6
Author: Daxonus <elias@dobrin.net>
Date:   Sun Jun 5 19:23:50 2022 -0700

    muscle activation cycle

diff --git a/main.py b/main.py
index 3558911..8ad7e81 100644
--- a/main.py
+++ b/main.py
@@ -16,16 +16,15 @@ cartilages = [
 ]
 
 ligaments = [
-    Ligament(cartilages=(cartilages[0], cartilages[1]), stiffness=50, dampening=1),
-    Ligament(cartilages=(cartilages[1], cartilages[2]), stiffness=50, dampening=1),
-    Ligament(cartilages=(cartilages[2], cartilages[3]), stiffness=50, dampening=1),
-    Ligament(cartilages=(cartilages[3], cartilages[0]), stiffness=50, dampening=1),
     Ligament(cartilages=(cartilages[0], cartilages[2]), stiffness=50, dampening=1),
     Ligament(cartilages=(cartilages[1], cartilages[3]), stiffness=50, dampening=1),
 ]
 
 muscles = [
-
+    Muscle(cartilages=(cartilages[0], cartilages[1]), stiffness=50, dampening=1),
+    Muscle(cartilages=(cartilages[1], cartilages[2]), stiffness=50, dampening=1),
+    Muscle(cartilages=(cartilages[2], cartilages[3]), stiffness=50, dampening=1),
+    Muscle(cartilages=(cartilages[3], cartilages[0]), stiffness=50, dampening=1),
 ]
 
 
@@ -36,6 +35,9 @@ for png in os.scandir("output"):
     os.remove(png)
 
 for i in range(500):
+    if i % 100 == 99:
+        muscles[3].activation = (0.7 - muscles[3].activation)
+
     for k in range(10):
         # Reset forces
         for cartilage in cartilages:
@@ -94,6 +96,18 @@ for i in range(500):
         context.set_line_width(0.01)
         context.stroke()
 
+    for muscle in muscles:
+        cartilage_1 = muscle.cartilages[0]
+        cartilage_2 = muscle.cartilages[1]
+        context.move_to(cartilage_1.position.x, cartilage_1.position.y)
+        context.line_to(cartilage_2.position.x, cartilage_2.position.y)
+        context.set_source_rgb(0, 0, 0)
+        context.set_line_width(0.02)
+        context.stroke_preserve()
+        context.set_source_rgb(1, 0.7 * (1 - muscle.activation), 0.7 * (1 - muscle.activation))
+        context.set_line_width(0.01)
+        context.stroke()
+
     for cartilage in cartilages:
         context.arc(cartilage.position.x, cartilage.position.y, 0.01, 0, tau)
         context.set_source_rgb(1, 1, 1)

commit a4d8927e1bf2e7fc0881204cd02dc18d9b99055b
Author: Daxonus <elias@dobrin.net>
Date:   Sun Jun 5 18:33:10 2022 -0700

    fixed physics bugs

diff --git a/main.py b/main.py
index d481108..3558911 100644
--- a/main.py
+++ b/main.py
@@ -9,19 +9,21 @@ camera_position = Vector(0, 0)
 camera_zoom = 1
 
 cartilages = [
-    Cartilage(mass=1, position=Vector(0, 0)),
-    Cartilage(mass=1, position=Vector(0.2, 0)),
-    Cartilage(mass=1, position=Vector(0.2, 0.2)),
-    Cartilage(mass=1, position=Vector(0, 0.2)),
+    Cartilage(mass=0.1, position=Vector(0, 0)),
+    Cartilage(mass=0.1, position=Vector(0.2, 0)),
+    Cartilage(mass=0.1, position=Vector(0.2, 0.2)),
+    Cartilage(mass=0.1, position=Vector(0, 0.2)),
 ]
+
 ligaments = [
-    Ligament(cartilages=(cartilages[0], cartilages[1]), stiffness=1, dampening=0.01),
-    Ligament(cartilages=(cartilages[1], cartilages[2]), stiffness=1, dampening=0.01),
-    Ligament(cartilages=(cartilages[2], cartilages[3]), stiffness=1, dampening=0.01),
-    Ligament(cartilages=(cartilages[3], cartilages[0]), stiffness=1, dampening=0.01),
-    Ligament(cartilages=(cartilages[0], cartilages[2]), stiffness=1, dampening=0.01),
-    Ligament(cartilages=(cartilages[1], cartilages[3]), stiffness=1, dampening=0.01),
+    Ligament(cartilages=(cartilages[0], cartilages[1]), stiffness=50, dampening=1),
+    Ligament(cartilages=(cartilages[1], cartilages[2]), stiffness=50, dampening=1),
+    Ligament(cartilages=(cartilages[2], cartilages[3]), stiffness=50, dampening=1),
+    Ligament(cartilages=(cartilages[3], cartilages[0]), stiffness=50, dampening=1),
+    Ligament(cartilages=(cartilages[0], cartilages[2]), stiffness=50, dampening=1),
+    Ligament(cartilages=(cartilages[1], cartilages[3]), stiffness=50, dampening=1),
 ]
+
 muscles = [
 
 ]
@@ -33,36 +35,38 @@ os.makedirs("output", exist_ok=True)
 for png in os.scandir("output"):
     os.remove(png)
 
-for i in range(100):
-    # Reset forces
-    for cartilage in cartilages:
-        cartilage.force.set(Vector(0, 0))
-
-    # Apply gravity forces
-    for cartilage in cartilages:
-        cartilage.force.add(Vector(0, -9.8 * cartilage.mass))
-
-    # Apply ligament forces
-    for ligament in ligaments + muscles:
-        cartilage_1 = ligament.cartilages[0]
-        cartilage_2 = ligament.cartilages[1]
-        vector_ligament = (cartilage_1.position - cartilage_2.position) / Vector.dist(cartilage_1.position, cartilage_2.position)
-        cartilage_1.force.add(ligament.get_force() * vector_ligament)
-        cartilage_1.force.sub(ligament.get_force() * vector_ligament)
-
-    # Apply collision forces
-    for cartilage in cartilages:
-        if cartilage.position.y < 0:
-            force_normal = Vector(0, 100 * abs(cartilage.position.y))
-            force_friction = Vector(0.25 * force_normal.y, 0)
-            if cartilage.velocity.x > 0:
-                force_friction.x *= -1
-
-    # Integrate with time, twice
-    for cartilage in cartilages:
-        cartilage.acceleration = cartilage.force / cartilage.mass
-        cartilage.velocity += cartilage.acceleration * 0.001
-        cartilage.position += cartilage.velocity * 0.001
+for i in range(500):
+    for k in range(10):
+        # Reset forces
+        for cartilage in cartilages:
+            cartilage.force.set(Vector(0, 0))
+
+        # Apply ligament forces
+        for ligament in ligaments + muscles:
+            cartilage_1 = ligament.cartilages[0]
+            cartilage_2 = ligament.cartilages[1]
+            vector_ligament = (cartilage_1.position - cartilage_2.position) / Vector.dist(cartilage_1.position, cartilage_2.position)
+            cartilage_1.force.add(ligament.get_force() * vector_ligament)
+            cartilage_2.force.sub(ligament.get_force() * vector_ligament)
+
+        # Apply external forces
+        for cartilage in cartilages:
+            force_gravity = Vector(0, -9.8 * cartilage.mass)
+            cartilage.force.add(force_gravity)
+
+            if cartilage.position.y < 0:
+                force_normal = Vector(0, 200 * abs(force_gravity.y) * abs(cartilage.position.y))
+                force_friction = Vector(0.25 * force_normal.y, 0)
+                if cartilage.velocity.x > 0:
+                    force_friction.x *= -1
+                cartilage.force.add(force_normal)
+                cartilage.force.add(force_friction)
+
+        # Integrate with time, twice
+        for cartilage in cartilages:
+            cartilage.acceleration = cartilage.force / cartilage.mass
+            cartilage.velocity += cartilage.acceleration * 0.0005
+            cartilage.position += cartilage.velocity * 0.0005
 
     surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 500, 500)
     context = cairo.Context(surface)
@@ -87,10 +91,13 @@ for i in range(100):
         context.move_to(cartilage_1.position.x, cartilage_1.position.y)
         context.line_to(cartilage_2.position.x, cartilage_2.position.y)
         context.set_source_rgb(0, 0, 0)
+        context.set_line_width(0.01)
         context.stroke()
 
     for cartilage in cartilages:
         context.arc(cartilage.position.x, cartilage.position.y, 0.01, 0, tau)
+        context.set_source_rgb(1, 1, 1)
+        context.fill_preserve()
         context.set_source_rgb(0, 0, 0)
         context.set_line_width(0.005)
         context.stroke()

commit 68f330387a4f07fde478426f5fcb3c7e3e3fd997
Author: Daxonus <elias@dobrin.net>
Date:   Sun Jun 5 18:07:12 2022 -0700

    made render code

diff --git a/main.py b/main.py
index 96b8bb9..d481108 100644
--- a/main.py
+++ b/main.py
@@ -1,11 +1,18 @@
+from math import tau
+import os
+import cairo
+import ffmpeg
 from softbots import Softbot, Cartilage, Ligament, Muscle
 from vectors import Vector
 
+camera_position = Vector(0, 0)
+camera_zoom = 1
+
 cartilages = [
     Cartilage(mass=1, position=Vector(0, 0)),
-    Cartilage(mass=1, position=Vector(1, 0)),
-    Cartilage(mass=1, position=Vector(1, 1)),
-    Cartilage(mass=1, position=Vector(0, 1)),
+    Cartilage(mass=1, position=Vector(0.2, 0)),
+    Cartilage(mass=1, position=Vector(0.2, 0.2)),
+    Cartilage(mass=1, position=Vector(0, 0.2)),
 ]
 ligaments = [
     Ligament(cartilages=(cartilages[0], cartilages[1]), stiffness=1, dampening=0.01),
@@ -22,6 +29,10 @@ muscles = [
 
 softbody = Softbot(cartilages, ligaments, muscles)
 
+os.makedirs("output", exist_ok=True)
+for png in os.scandir("output"):
+    os.remove(png)
+
 for i in range(100):
     # Reset forces
     for cartilage in cartilages:
@@ -46,3 +57,50 @@ for i in range(100):
             force_friction = Vector(0.25 * force_normal.y, 0)
             if cartilage.velocity.x > 0:
                 force_friction.x *= -1
+
+    # Integrate with time, twice
+    for cartilage in cartilages:
+        cartilage.acceleration = cartilage.force / cartilage.mass
+        cartilage.velocity += cartilage.acceleration * 0.001
+        cartilage.position += cartilage.velocity * 0.001
+
+    surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 500, 500)
+    context = cairo.Context(surface)
+    context.scale(500, 500)
+    context.rectangle(0, 0, 1, 1)
+    context.set_source_rgb(1, 1, 1)
+    context.fill()
+    context.translate(0.5, 0.5)
+    context.scale(1, -1)
+    context.scale(camera_zoom, camera_zoom)
+    context.translate(camera_position.x, camera_position.y)
+
+    context.move_to(-10, 0)
+    context.line_to(10, 0)
+    context.set_source_rgb(0, 0, 0)
+    context.set_line_width(0.02)
+    context.stroke()
+
+    for ligament in ligaments:
+        cartilage_1 = ligament.cartilages[0]
+        cartilage_2 = ligament.cartilages[1]
+        context.move_to(cartilage_1.position.x, cartilage_1.position.y)
+        context.line_to(cartilage_2.position.x, cartilage_2.position.y)
+        context.set_source_rgb(0, 0, 0)
+        context.stroke()
+
+    for cartilage in cartilages:
+        context.arc(cartilage.position.x, cartilage.position.y, 0.01, 0, tau)
+        context.set_source_rgb(0, 0, 0)
+        context.set_line_width(0.005)
+        context.stroke()
+
+    surface.write_to_png(f"output/{i:06d}.png")
+
+
+
+ffmpeg.input("output/%06d.png", pattern_type="sequence", framerate=60).output("output.mp4").run(overwrite_output=True)
+for png in os.scandir("output"):
+    os.remove(png)
+os.rmdir("output")
+os.startfile("output.mp4")
\ No newline at end of file
diff --git a/softbots.py b/softbots.py
index dd31ad1..075cfed 100644
--- a/softbots.py
+++ b/softbots.py
@@ -18,6 +18,7 @@ class Cartilage:
     mass: float
     position: Vector
     velocity: Vector
+    acceleration: Vector
     force: Vector
 
     def __init__(self, mass: float, position: Vector) -> None:

commit e89b664894993bfc4c5a2dcfa2ff2e744ed1317a
Author: Daxonus <elias@dobrin.net>
Date:   Sun Jun 5 16:54:42 2022 -0700

    working on normal force and friction

diff --git a/main.py b/main.py
index 757fcb2..96b8bb9 100644
--- a/main.py
+++ b/main.py
@@ -27,12 +27,22 @@ for i in range(100):
     for cartilage in cartilages:
         cartilage.force.set(Vector(0, 0))
 
+    # Apply gravity forces
     for cartilage in cartilages:
         cartilage.force.add(Vector(0, -9.8 * cartilage.mass))
 
+    # Apply ligament forces
     for ligament in ligaments + muscles:
         cartilage_1 = ligament.cartilages[0]
         cartilage_2 = ligament.cartilages[1]
         vector_ligament = (cartilage_1.position - cartilage_2.position) / Vector.dist(cartilage_1.position, cartilage_2.position)
         cartilage_1.force.add(ligament.get_force() * vector_ligament)
         cartilage_1.force.sub(ligament.get_force() * vector_ligament)
+
+    # Apply collision forces
+    for cartilage in cartilages:
+        if cartilage.position.y < 0:
+            force_normal = Vector(0, 100 * abs(cartilage.position.y))
+            force_friction = Vector(0.25 * force_normal.y, 0)
+            if cartilage.velocity.x > 0:
+                force_friction.x *= -1

commit 44f923369c7fdb1882bf75cec2fc092b95462bbf
Author: Daxonus <elias@dobrin.net>
Date:   Sun Jun 5 16:38:51 2022 -0700

    working on engine loop

diff --git a/main.py b/main.py
index 7073e0c..757fcb2 100644
--- a/main.py
+++ b/main.py
@@ -1,21 +1,38 @@
-from softbodies import Softbody, Node, Link
+from softbots import Softbot, Cartilage, Ligament, Muscle
 from vectors import Vector
 
-nodes = [
-    Node(mass=1, position=Vector(0, 0)),
-    Node(mass=1, position=Vector(1, 0)),
-    Node(mass=1, position=Vector(1, 1)),
-    Node(mass=1, position=Vector(0, 1)),
+cartilages = [
+    Cartilage(mass=1, position=Vector(0, 0)),
+    Cartilage(mass=1, position=Vector(1, 0)),
+    Cartilage(mass=1, position=Vector(1, 1)),
+    Cartilage(mass=1, position=Vector(0, 1)),
 ]
+ligaments = [
+    Ligament(cartilages=(cartilages[0], cartilages[1]), stiffness=1, dampening=0.01),
+    Ligament(cartilages=(cartilages[1], cartilages[2]), stiffness=1, dampening=0.01),
+    Ligament(cartilages=(cartilages[2], cartilages[3]), stiffness=1, dampening=0.01),
+    Ligament(cartilages=(cartilages[3], cartilages[0]), stiffness=1, dampening=0.01),
+    Ligament(cartilages=(cartilages[0], cartilages[2]), stiffness=1, dampening=0.01),
+    Ligament(cartilages=(cartilages[1], cartilages[3]), stiffness=1, dampening=0.01),
+]
+muscles = [
 
-links = [
-    Link(nodes=(nodes[0], nodes[1]), stiffness=1, dampening=0.01),
-    Link(nodes=(nodes[1], nodes[2]), stiffness=1, dampening=0.01),
-    Link(nodes=(nodes[2], nodes[3]), stiffness=1, dampening=0.01),
-    Link(nodes=(nodes[3], nodes[0]), stiffness=1, dampening=0.01),
-    Link(nodes=(nodes[0], nodes[2]), stiffness=1, dampening=0.01),
-    Link(nodes=(nodes[1], nodes[3]), stiffness=1, dampening=0.01),
 ]
 
-softbody = Softbody(nodes, links)
 
+softbody = Softbot(cartilages, ligaments, muscles)
+
+for i in range(100):
+    # Reset forces
+    for cartilage in cartilages:
+        cartilage.force.set(Vector(0, 0))
+
+    for cartilage in cartilages:
+        cartilage.force.add(Vector(0, -9.8 * cartilage.mass))
+
+    for ligament in ligaments + muscles:
+        cartilage_1 = ligament.cartilages[0]
+        cartilage_2 = ligament.cartilages[1]
+        vector_ligament = (cartilage_1.position - cartilage_2.position) / Vector.dist(cartilage_1.position, cartilage_2.position)
+        cartilage_1.force.add(ligament.get_force() * vector_ligament)
+        cartilage_1.force.sub(ligament.get_force() * vector_ligament)
diff --git a/softbots.py b/softbots.py
index 857b373..dd31ad1 100644
--- a/softbots.py
+++ b/softbots.py
@@ -5,10 +5,12 @@ from vectors import Vector
 class Softbot:
     cartilages: list[Cartilage]
     ligaments: list[Ligament]
+    muscles: list[Muscle]
 
-    def __init__(self, cartilages: list[Cartilage], ligaments: list[Ligament]) -> None:
+    def __init__(self, cartilages: list[Cartilage], ligaments: list[Ligament], muscles: list[Muscle]) -> None:
         self.cartilages = cartilages
         self.ligaments = ligaments
+        self.muscles = muscles
 
 
 class Cartilage:
@@ -28,15 +30,15 @@ class Cartilage:
 
 class Ligament:
     """A massless Hookean spring that features a pair of spring stiffness and dampening forces."""
-    nodes: tuple[Cartilage, Cartilage]
+    cartilages: tuple[Cartilage, Cartilage]
     length: float
     stiffness: float
     dampening: float
 
-    def __init__(self, nodes: tuple[Cartilage, Cartilage], stiffness: float, dampening: float, length: float = None) -> None:
-        self.nodes = nodes
+    def __init__(self, cartilages: tuple[Cartilage, Cartilage], stiffness: float, dampening: float, length: float = None) -> None:
+        self.cartilages = cartilages
         if length is None:
-            self.length = Vector.dist(nodes[0].position, nodes[1].position)
+            self.length = Vector.dist(cartilages[0].position, cartilages[1].position)
         else:
             self.length = length
         self.stiffness = stiffness
@@ -44,7 +46,7 @@ class Ligament:
 
     def get_length(self) -> float:
         """Get the momentary length of the link."""
-        return Vector.dist(self.nodes[0].position, self.nodes[1].position)
+        return Vector.dist(self.cartilages[0].position, self.cartilages[1].position)
 
     def get_displacement(self) -> float:
         """Get the expansion/contraction of the link from its resting configuration (positive/negative)."""
@@ -52,7 +54,7 @@ class Ligament:
 
     def get_velocity(self) -> float:
         """Get the speed of the expansion/contraction of the link (positive/negative)."""
-        return Vector.dot(self.nodes[0].position - self.nodes[1].position, self.nodes[0].velocity - self.nodes[1].velocity) / self.get_length()
+        return Vector.dot(self.cartilages[0].position - self.cartilages[1].position, self.cartilages[0].velocity - self.cartilages[1].velocity) / self.get_length()
 
     def get_force(self) -> float:
         """Get the spring force expansion/contraction (positive/negative)."""
@@ -70,8 +72,8 @@ class Ligament:
 class Muscle(Ligament):
     activation: float
 
-    def __init__(self, nodes: tuple[Cartilage, Cartilage], stiffness: float, dampening: float, length: float = None) -> None:
-        super().__init__(nodes, stiffness, dampening, length)
+    def __init__(self, cartilages: tuple[Cartilage, Cartilage], stiffness: float, dampening: float, length: float = None) -> None:
+        super().__init__(cartilages, stiffness, dampening, length)
         self.activation = 0
 
     def get_displacement(self) -> float:

commit 255132df6d8bdb31ab978d37af32e2920548eacd
Author: Daxonus <elias@dobrin.net>
Date:   Sun Jun 5 16:25:47 2022 -0700

    added muscle class

diff --git a/softbots.py b/softbots.py
index 91b4d3f..857b373 100644
--- a/softbots.py
+++ b/softbots.py
@@ -54,14 +54,25 @@ class Ligament:
         """Get the speed of the expansion/contraction of the link (positive/negative)."""
         return Vector.dot(self.nodes[0].position - self.nodes[1].position, self.nodes[0].velocity - self.nodes[1].velocity) / self.get_length()
 
-    def get_stiffness_force(self) -> float:
+    def get_force(self) -> float:
+        """Get the spring force expansion/contraction (positive/negative)."""
+        return self.get_force_stiffness() + self.get_force_dampening()
+
+    def get_force_stiffness(self) -> float:
         """Get the spring stiffness force expansion/contraction (positive/negative)."""
         return -self.stiffness * self.get_displacement()
 
-    def get_dampening_force(self) -> float:
+    def get_force_dampening(self) -> float:
         """Get the spring dampening force expansion/contraction (positive/negative)."""
         return -self.dampening * self.get_velocity()
 
-    def get_force(self) -> float:
-        """Get the spring force expansion/contraction (positive/negative)."""
-        return self.get_stiffness_force() + self.get_dampening_force()
+
+class Muscle(Ligament):
+    activation: float
+
+    def __init__(self, nodes: tuple[Cartilage, Cartilage], stiffness: float, dampening: float, length: float = None) -> None:
+        super().__init__(nodes, stiffness, dampening, length)
+        self.activation = 0
+
+    def get_displacement(self) -> float:
+        return self.get_length() - self.length * (1 - self.activation)

commit 9c670d02fcbe3f16792884b66be66bd11ad0ac4d
Author: Daxonus <elias@dobrin.net>
Date:   Sun Jun 5 16:08:03 2022 -0700

    added softbots library with different types

diff --git a/sb_square_launch.py b/sb_square_launch.py
index a787e37..67b9e4e 100644
--- a/sb_square_launch.py
+++ b/sb_square_launch.py
@@ -56,10 +56,10 @@ for i in range(250):
         for node in nodes:
             node.force.set(Vector(0, -9.8 * node.mass))
         for link in links:
-            link.nodes[0].force.add(link.get_force() * (link.nodes[0].position - link.nodes[1].position) / Vector.dist(
-                link.nodes[0].position, link.nodes[1].position))
-            link.nodes[1].force.add(link.get_force() * (link.nodes[1].position - link.nodes[0].position) / Vector.dist(
-                link.nodes[0].position, link.nodes[1].position))
+            link.cartilages[0].force.add(link.get_force() * (link.cartilages[0].position - link.cartilages[1].position) / Vector.dist(
+                link.cartilages[0].position, link.cartilages[1].position))
+            link.cartilages[1].force.add(link.get_force() * (link.cartilages[1].position - link.cartilages[0].position) / Vector.dist(
+                link.cartilages[0].position, link.cartilages[1].position))
 
         for node in nodes:
             force_normal = Vector(0, 0)
@@ -97,8 +97,8 @@ for i in range(250):
     context.stroke()
 
     for link in links:
-        context.move_to(link.nodes[0].position.x, link.nodes[0].position.y)
-        context.line_to(link.nodes[1].position.x, link.nodes[1].position.y)
+        context.move_to(link.cartilages[0].position.x, link.cartilages[0].position.y)
+        context.line_to(link.cartilages[1].position.x, link.cartilages[1].position.y)
         context.set_source_rgb(0, 0, 0)
         context.set_line_width(0.01 * (link.length / link.get_length()))
         context.stroke()
diff --git a/softbodies.py b/softbots.py
similarity index 78%
rename from softbodies.py
rename to softbots.py
index 5a4a0ab..91b4d3f 100644
--- a/softbodies.py
+++ b/softbots.py
@@ -2,16 +2,16 @@ from __future__ import annotations
 from vectors import Vector
 
 
-class Softbody:
-    nodes: list[Node]
-    links: list[Link]
+class Softbot:
+    cartilages: list[Cartilage]
+    ligaments: list[Ligament]
 
-    def __init__(self, nodes: list[Node], links: list[Link]) -> None:
-        self.nodes = nodes
-        self.links = links
+    def __init__(self, cartilages: list[Cartilage], ligaments: list[Ligament]) -> None:
+        self.cartilages = cartilages
+        self.ligaments = ligaments
 
 
-class Node:
+class Cartilage:
     """A point mass particle that implements Euler integration."""
     mass: float
     position: Vector
@@ -26,14 +26,14 @@ class Node:
         self.force = Vector(0, 0)
 
 
-class Link:
+class Ligament:
     """A massless Hookean spring that features a pair of spring stiffness and dampening forces."""
-    nodes: tuple[Node, Node]
+    nodes: tuple[Cartilage, Cartilage]
     length: float
     stiffness: float
     dampening: float
 
-    def __init__(self, nodes: tuple[Node, Node], stiffness: float, dampening: float, length: float = None) -> None:
+    def __init__(self, nodes: tuple[Cartilage, Cartilage], stiffness: float, dampening: float, length: float = None) -> None:
         self.nodes = nodes
         if length is None:
             self.length = Vector.dist(nodes[0].position, nodes[1].position)
@@ -50,7 +50,7 @@ class Link:
         """Get the expansion/contraction of the link from its resting configuration (positive/negative)."""
         return self.get_length() - self.length
 
-    def get_speed(self) -> float:
+    def get_velocity(self) -> float:
         """Get the speed of the expansion/contraction of the link (positive/negative)."""
         return Vector.dot(self.nodes[0].position - self.nodes[1].position, self.nodes[0].velocity - self.nodes[1].velocity) / self.get_length()
 
@@ -60,7 +60,7 @@ class Link:
 
     def get_dampening_force(self) -> float:
         """Get the spring dampening force expansion/contraction (positive/negative)."""
-        return -self.dampening * self.get_speed()
+        return -self.dampening * self.get_velocity()
 
     def get_force(self) -> float:
         """Get the spring force expansion/contraction (positive/negative)."""

commit c2013b6c36f2194bd7b138a7cf05cc4d0fe66e3d
Author: Daxonus <elias@dobrin.net>
Date:   Fri Jun 3 21:17:36 2022 -0700

    still working on softbots

diff --git a/main.py b/main.py
new file mode 100644
index 0000000..7073e0c
--- /dev/null
+++ b/main.py
@@ -0,0 +1,21 @@
+from softbodies import Softbody, Node, Link
+from vectors import Vector
+
+nodes = [
+    Node(mass=1, position=Vector(0, 0)),
+    Node(mass=1, position=Vector(1, 0)),
+    Node(mass=1, position=Vector(1, 1)),
+    Node(mass=1, position=Vector(0, 1)),
+]
+
+links = [
+    Link(nodes=(nodes[0], nodes[1]), stiffness=1, dampening=0.01),
+    Link(nodes=(nodes[1], nodes[2]), stiffness=1, dampening=0.01),
+    Link(nodes=(nodes[2], nodes[3]), stiffness=1, dampening=0.01),
+    Link(nodes=(nodes[3], nodes[0]), stiffness=1, dampening=0.01),
+    Link(nodes=(nodes[0], nodes[2]), stiffness=1, dampening=0.01),
+    Link(nodes=(nodes[1], nodes[3]), stiffness=1, dampening=0.01),
+]
+
+softbody = Softbody(nodes, links)
+
diff --git a/sb_square_launch.py b/sb_square_launch.py
new file mode 100644
index 0000000..a787e37
--- /dev/null
+++ b/sb_square_launch.py
@@ -0,0 +1,121 @@
+import os
+from math import pi, tau
+from time import sleep
+import cairo
+import ffmpeg
+from structures import Tower
+from vectors import Vector
+
+print("This program will simulate the physics of a softbody square mesh.")
+sleep(1)
+print("The object is dropped from a height of 0.5 meters and is then launched diagonally.\n")
+sleep(1)
+
+print("Enter the number of lateral grid elements in the mesh.")
+grid_x = 1
+while True:
+    try:
+        grid_x = int(input("[1-7]: "))
+        assert 1 <= grid_x <= 7
+        break
+    except:
+        continue
+
+print("Enter the number of medial grid elements in the mesh.")
+grid_y = 1
+while True:
+    try:
+        grid_y = int(input("[1-7]: "))
+        assert 1 <= grid_y <= 7
+        break
+    except:
+        continue
+
+print("Solving differential equations...")
+
+structure = Tower(width=0.1 * grid_x, height=0.1 * grid_y, grid=(grid_x, grid_y), mass=0.1, stiffness=50, dampening=1)
+structure.translate(Vector(0.5, 0.5))
+structure.rotate(pi / 12, center=Vector(0.5, 0.5))
+nodes, links = structure.get_components()
+
+camera_position = Vector(0.5, 0.5)
+camera_zoom = 0.9
+
+
+os.makedirs("output", exist_ok=True)
+for png in os.scandir("output"):
+    os.remove(png)
+
+for i in range(250):
+    if i == 100:
+        for node in nodes:
+            node.velocity.x += 3
+            node.velocity.y += 5
+
+    for s in range(10):
+        for node in nodes:
+            node.force.set(Vector(0, -9.8 * node.mass))
+        for link in links:
+            link.nodes[0].force.add(link.get_force() * (link.nodes[0].position - link.nodes[1].position) / Vector.dist(
+                link.nodes[0].position, link.nodes[1].position))
+            link.nodes[1].force.add(link.get_force() * (link.nodes[1].position - link.nodes[0].position) / Vector.dist(
+                link.nodes[0].position, link.nodes[1].position))
+
+        for node in nodes:
+            force_normal = Vector(0, 0)
+            if node.position.x < 0:
+                force_normal.x += 100 * abs(node.position.x)
+            elif node.position.x > 1:
+                force_normal.x -= 100 * abs(1 - node.position.x)
+            if node.position.y < 0:
+                force_normal.y += 100 * abs(node.position.y)
+            elif node.position.y > 1:
+                force_normal.y -= 100 * abs(1 - node.position.y)
+            try:
+                force_friction = -0.25 * force_normal.len() * (node.velocity / node.velocity.len())
+            except ZeroDivisionError:
+                force_friction = Vector(0, 0)
+            node.force += force_normal + force_friction
+
+        for node in nodes:
+            node.integrate(time=0.0005)
+
+    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 500, 500)
+    context = cairo.Context(surface)
+    context.scale(500, 500)
+    context.rectangle(0, 0, 1, 1)
+    context.set_source_rgb(1, 1, 1)
+    context.fill()
+    context.translate(0.5, 0.5)
+    context.scale(1, -1)
+    context.scale(camera_zoom, camera_zoom)
+    context.translate(-camera_position.x, -camera_position.y)
+
+    context.rectangle(0, 0, 1, 1)
+    context.set_source_rgb(0, 0, 0)
+    context.set_line_width(0.01)
+    context.stroke()
+
+    for link in links:
+        context.move_to(link.nodes[0].position.x, link.nodes[0].position.y)
+        context.line_to(link.nodes[1].position.x, link.nodes[1].position.y)
+        context.set_source_rgb(0, 0, 0)
+        context.set_line_width(0.01 * (link.length / link.get_length()))
+        context.stroke()
+
+    for node in nodes:
+        amt = node.velocity.len()
+        context.arc(node.position.x, node.position.y, 0.01, 0, tau)
+        context.set_source_rgb(1, 1 - amt / 5, 1 - amt / 5)
+        context.fill_preserve()
+        context.set_source_rgb(0, 0, 0)
+        context.set_line_width(0.005)
+        context.stroke()
+
+    surface.write_to_png(f"output/{i:06d}.png")
+
+ffmpeg.input("output/%06d.png", pattern_type="sequence", framerate=60).output("output.mp4").run(overwrite_output=True)
+for png in os.scandir("output"):
+    os.remove(png)
+os.rmdir("output")
+os.startfile("output.mp4")
\ No newline at end of file
diff --git a/softbodies.py b/softbodies.py
index 497e7cf..5a4a0ab 100644
--- a/softbodies.py
+++ b/softbodies.py
@@ -22,6 +22,7 @@ class Node:
         self.mass = mass
         self.position = position
         self.velocity = Vector(0, 0)
+        self.acceleration = Vector(0, 0)
         self.force = Vector(0, 0)
 
 
@@ -45,14 +46,14 @@ class Link:
         """Get the momentary length of the link."""
         return Vector.dist(self.nodes[0].position, self.nodes[1].position)
 
-    def get_speed(self) -> float:
-        """Get the speed of the expansion/contraction of the link (positive/negative)."""
-        return Vector.dot(self.nodes[0].position - self.nodes[1].position, self.nodes[0].velocity - self.nodes[1].velocity) / self.get_length()
-
     def get_displacement(self) -> float:
         """Get the expansion/contraction of the link from its resting configuration (positive/negative)."""
         return self.get_length() - self.length
 
+    def get_speed(self) -> float:
+        """Get the speed of the expansion/contraction of the link (positive/negative)."""
+        return Vector.dot(self.nodes[0].position - self.nodes[1].position, self.nodes[0].velocity - self.nodes[1].velocity) / self.get_length()
+
     def get_stiffness_force(self) -> float:
         """Get the spring stiffness force expansion/contraction (positive/negative)."""
         return -self.stiffness * self.get_displacement()

commit 106b9d11950231d0d4703c6f71da570c3ef34046
Author: Daxonus <elias@dobrin.net>
Date:   Thu Jun 2 20:05:29 2022 -0700

    added libraries

diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
index 0000000..13566b8
--- /dev/null
+++ b/.idea/.gitignore
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
index 0000000..98484bc
--- /dev/null
+++ b/.idea/inspectionProfiles/Project_Default.xml
@@ -0,0 +1,27 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="DuplicatedCode" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredPackages">
+        <value>
+          <list size="6">
+            <item index="0" class="java.lang.String" itemvalue="fonttools" />
+            <item index="1" class="java.lang.String" itemvalue="kiwisolver" />
+            <item index="2" class="java.lang.String" itemvalue="pyparsing" />
+            <item index="3" class="java.lang.String" itemvalue="matplotlib" />
+            <item index="4" class="java.lang.String" itemvalue="Pillow" />
+            <item index="5" class="java.lang.String" itemvalue="numpy" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyPep8Inspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
+      <option name="ignoredErrors">
+        <list>
+          <option value="E501" />
+        </list>
+      </option>
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
index 0000000..105ce2d
--- /dev/null
+++ b/.idea/inspectionProfiles/profiles_settings.xml
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000..dc9ea49
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000..0609e15
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/softbots.iml" filepath="$PROJECT_DIR$/.idea/softbots.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/softbots.iml b/.idea/softbots.iml
new file mode 100644
index 0000000..8b8c395
--- /dev/null
+++ b/.idea/softbots.iml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..94a25f7
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/softbodies.py b/softbodies.py
index ce74f33..497e7cf 100644
--- a/softbodies.py
+++ b/softbodies.py
@@ -10,10 +10,6 @@ class Softbody:
         self.nodes = nodes
         self.links = links
 
-    def integrate(self, time: float) -> None:
-        for node in self.nodes:
-            node.integrate(time)
-
 
 class Node:
     """A point mass particle that implements Euler integration."""
@@ -28,12 +24,6 @@ class Node:
         self.velocity = Vector(0, 0)
         self.force = Vector(0, 0)
 
-    def integrate(self, time: float) -> None:
-        """Integrate the position and velocity with Euler's method."""
-        acceleration = self.force / self.mass
-        self.velocity += acceleration * time
-        self.position += self.velocity * time
-
 
 class Link:
     """A massless Hookean spring that features a pair of spring stiffness and dampening forces."""
@@ -74,13 +64,3 @@ class Link:
     def get_force(self) -> float:
         """Get the spring force expansion/contraction (positive/negative)."""
         return self.get_stiffness_force() + self.get_dampening_force()
-
-    def integrate(self, time: float) -> None:
-        self.nodes[0].integrate(time)
-        self.nodes[1].integrate(time)
-
-
-if __name__ == "__main__":
-    from time import sleep
-    print("Do not run me! This is just a dependency program")
-    sleep(5)
\ No newline at end of file
diff --git a/vectors.py b/vectors.py
index edfdee0..5127898 100644
--- a/vectors.py
+++ b/vectors.py
@@ -23,39 +23,39 @@ class Vector:
     def __str__(self) -> str:
         return f"({self.x}, {self.y})"
 
-    def __add__(self, vector: Vector, /) -> Vector:
+    def __add__(self, vector: Vector) -> Vector:
         """(+) Add caller vector with parameter vector, without modification to vector."""
         return self.copy().add(vector)
 
-    def __iadd__(self, vector: Vector, /) -> Vector:
+    def __iadd__(self, vector: Vector) -> Vector:
         """(+=) Add caller vector with parameter vector, with modification to caller vector."""
         return self.add(vector)
 
-    def __sub__(self, vector: Vector, /) -> Vector:
+    def __sub__(self, vector: Vector) -> Vector:
         """(-) Subtract parameter vector from caller vector, without modification to vector."""
         return self.copy().sub(vector)
 
-    def __isub__(self, vector: Vector, /) -> Vector:
+    def __isub__(self, vector: Vector) -> Vector:
         """(-=) Subtract parameter vector from caller vector, with modification to caller vector."""
         return self.sub(vector)
 
-    def __mul__(self, multiplier: float, /) -> Vector:
+    def __mul__(self, multiplier: float) -> Vector:
         """(*) Multiply vector coordinates by a number, without modification to vector."""
         return self.copy().mul(multiplier)
 
-    def __rmul__(self, multiplier: float, /) -> Vector:
+    def __rmul__(self, multiplier: float) -> Vector:
         """(*) Multiply vector coordinates by a number, without modification to vector."""
         return self.copy().mul(multiplier)
 
-    def __imul__(self, multiplier: float, /) -> Vector:
+    def __imul__(self, multiplier: float) -> Vector:
         """(*=) Multiply vector coordinates by a number, with modification to vector."""
         return self.mul(multiplier)
 
-    def __truediv__(self, divisor: float, /) -> Vector:
+    def __truediv__(self, divisor: float) -> Vector:
         """(/) Divide vector coordinates by a number, without modification to vector."""
         return self.copy().div(divisor)
 
-    def __itruediv__(self, divisor: float, /) -> Vector:
+    def __itruediv__(self, divisor: float) -> Vector:
         """(/=) Divide vector coordinates by a number, with modification to vector."""
         return self.div(divisor)
 
@@ -67,39 +67,39 @@ class Vector:
         """(-) Flip the sign of vector coordinates, without modification to vector."""
         return self.copy().mul(-1)
 
-    def __matmul__(self, vector: Vector, /) -> float:
+    def __matmul__(self, vector: Vector) -> float:
         """(@) Find the dot product of two vectors as vectors."""
         return self.dot(vector)
 
-    def __mod__(self, vector: Vector, /) -> float:
+    def __mod__(self, vector: Vector) -> float:
         """(%) Find the cross product of two vectors as vectors."""
         return self.cross(vector)
 
-    def set(self, vector: Vector, /) -> Vector:
+    def set(self, vector: Vector) -> Vector:
         """Set coordinates of caller vector to match parameter vector."""
         self.x = vector.x
         self.y = vector.y
         return self
 
-    def add(self, vector: Vector, /) -> Vector:
+    def add(self, vector: Vector) -> Vector:
         """Add caller vector with parameter vector, with modification to caller vector."""
         self.x += vector.x
         self.y += vector.y
         return self
 
-    def sub(self, vector: Vector, /) -> Vector:
+    def sub(self, vector: Vector) -> Vector:
         """Subtract parameter vector from caller vector, with modification to caller vector."""
         self.x -= vector.x
         self.y -= vector.y
         return self
 
-    def mul(self, multiplier: float, /) -> Vector:
+    def mul(self, multiplier: float) -> Vector:
         """Multiply vector coordinates by a number, with modification to vector."""
         self.x *= multiplier
         self.y *= multiplier
         return self
 
-    def div(self, divisor: float, /) -> Vector:
+    def div(self, divisor: float) -> Vector:
         """Divide vector coordinates by a number, with modification to vector."""
         self.x /= divisor
         self.y /= divisor
@@ -109,24 +109,18 @@ class Vector:
         """Find the distance to the origin."""
         return hypot(self.x, self.y)
 
-    def dist(self, vector: Vector, /) -> float:
+    def dist(self, vector: Vector) -> float:
         """Find the distance between two vectors."""
         return hypot(self.x - vector.x, self.y - vector.y)
 
-    def dot(self, vector: Vector, /) -> float:
+    def dot(self, vector: Vector) -> float:
         """Find the dot product of two vectors."""
         return self.x * vector.x + self.y * vector.y
 
-    def cross(self, vector: Vector, /) -> float:
+    def cross(self, vector: Vector) -> float:
         """Find the cross product of two vectors."""
         return self.x * vector.y - self.y * vector.x
 
     def copy(self) -> Vector:
         """Copy the vector instance."""
         return Vector(self.x, self.y)
-
-
-if __name__ == "__main__":
-    from time import sleep
-    print("Do not run me! This is just a dependency program")
-    sleep(5)
\ No newline at end of file

commit 293dec063066949c40cd615312706ff4641b5799
Author: Daxonus <elias@dobrin.net>
Date:   Thu Jun 2 19:57:40 2022 -0700

    added libraries

diff --git a/softbodies.py b/softbodies.py
new file mode 100644
index 0000000..ce74f33
--- /dev/null
+++ b/softbodies.py
@@ -0,0 +1,86 @@
+from __future__ import annotations
+from vectors import Vector
+
+
+class Softbody:
+    nodes: list[Node]
+    links: list[Link]
+
+    def __init__(self, nodes: list[Node], links: list[Link]) -> None:
+        self.nodes = nodes
+        self.links = links
+
+    def integrate(self, time: float) -> None:
+        for node in self.nodes:
+            node.integrate(time)
+
+
+class Node:
+    """A point mass particle that implements Euler integration."""
+    mass: float
+    position: Vector
+    velocity: Vector
+    force: Vector
+
+    def __init__(self, mass: float, position: Vector) -> None:
+        self.mass = mass
+        self.position = position
+        self.velocity = Vector(0, 0)
+        self.force = Vector(0, 0)
+
+    def integrate(self, time: float) -> None:
+        """Integrate the position and velocity with Euler's method."""
+        acceleration = self.force / self.mass
+        self.velocity += acceleration * time
+        self.position += self.velocity * time
+
+
+class Link:
+    """A massless Hookean spring that features a pair of spring stiffness and dampening forces."""
+    nodes: tuple[Node, Node]
+    length: float
+    stiffness: float
+    dampening: float
+
+    def __init__(self, nodes: tuple[Node, Node], stiffness: float, dampening: float, length: float = None) -> None:
+        self.nodes = nodes
+        if length is None:
+            self.length = Vector.dist(nodes[0].position, nodes[1].position)
+        else:
+            self.length = length
+        self.stiffness = stiffness
+        self.dampening = dampening
+
+    def get_length(self) -> float:
+        """Get the momentary length of the link."""
+        return Vector.dist(self.nodes[0].position, self.nodes[1].position)
+
+    def get_speed(self) -> float:
+        """Get the speed of the expansion/contraction of the link (positive/negative)."""
+        return Vector.dot(self.nodes[0].position - self.nodes[1].position, self.nodes[0].velocity - self.nodes[1].velocity) / self.get_length()
+
+    def get_displacement(self) -> float:
+        """Get the expansion/contraction of the link from its resting configuration (positive/negative)."""
+        return self.get_length() - self.length
+
+    def get_stiffness_force(self) -> float:
+        """Get the spring stiffness force expansion/contraction (positive/negative)."""
+        return -self.stiffness * self.get_displacement()
+
+    def get_dampening_force(self) -> float:
+        """Get the spring dampening force expansion/contraction (positive/negative)."""
+        return -self.dampening * self.get_speed()
+
+    def get_force(self) -> float:
+        """Get the spring force expansion/contraction (positive/negative)."""
+        return self.get_stiffness_force() + self.get_dampening_force()
+
+    def integrate(self, time: float) -> None:
+        self.nodes[0].integrate(time)
+        self.nodes[1].integrate(time)
+
+
+if __name__ == "__main__":
+    from time import sleep
+    print("Do not run me! This is just a dependency program")
+    sleep(5)
\ No newline at end of file
diff --git a/vectors.py b/vectors.py
new file mode 100644
index 0000000..edfdee0
--- /dev/null
+++ b/vectors.py
@@ -0,0 +1,132 @@
+"""Python module for dealing with two-dimensional cartesian coordinates and vector operations."""
+
+from __future__ import annotations
+from math import hypot
+from collections.abc import Iterator
+
+
+class Vector:
+    """Two-dimensional vector represented in cartesian coordinates."""
+    x: float
+    y: float
+
+    def __init__(self, x: float, y: float) -> None:
+        """Instantiate a vector from cartesian coordinates."""
+        self.x = x
+        self.y = y
+
+    def __iter__(self) -> Iterator[float]:
+        """Iterate through the pair of coordinates."""
+        yield self.x
+        yield self.y
+
+    def __str__(self) -> str:
+        return f"({self.x}, {self.y})"
+
+    def __add__(self, vector: Vector, /) -> Vector:
+        """(+) Add caller vector with parameter vector, without modification to vector."""
+        return self.copy().add(vector)
+
+    def __iadd__(self, vector: Vector, /) -> Vector:
+        """(+=) Add caller vector with parameter vector, with modification to caller vector."""
+        return self.add(vector)
+
+    def __sub__(self, vector: Vector, /) -> Vector:
+        """(-) Subtract parameter vector from caller vector, without modification to vector."""
+        return self.copy().sub(vector)
+
+    def __isub__(self, vector: Vector, /) -> Vector:
+        """(-=) Subtract parameter vector from caller vector, with modification to caller vector."""
+        return self.sub(vector)
+
+    def __mul__(self, multiplier: float, /) -> Vector:
+        """(*) Multiply vector coordinates by a number, without modification to vector."""
+        return self.copy().mul(multiplier)
+
+    def __rmul__(self, multiplier: float, /) -> Vector:
+        """(*) Multiply vector coordinates by a number, without modification to vector."""
+        return self.copy().mul(multiplier)
+
+    def __imul__(self, multiplier: float, /) -> Vector:
+        """(*=) Multiply vector coordinates by a number, with modification to vector."""
+        return self.mul(multiplier)
+
+    def __truediv__(self, divisor: float, /) -> Vector:
+        """(/) Divide vector coordinates by a number, without modification to vector."""
+        return self.copy().div(divisor)
+
+    def __itruediv__(self, divisor: float, /) -> Vector:
+        """(/=) Divide vector coordinates by a number, with modification to vector."""
+        return self.div(divisor)
+
+    def __pos__(self) -> Vector:
+        """(+) Return the same vector instance."""
+        return self
+
+    def __neg__(self) -> Vector:
+        """(-) Flip the sign of vector coordinates, without modification to vector."""
+        return self.copy().mul(-1)
+
+    def __matmul__(self, vector: Vector, /) -> float:
+        """(@) Find the dot product of two vectors as vectors."""
+        return self.dot(vector)
+
+    def __mod__(self, vector: Vector, /) -> float:
+        """(%) Find the cross product of two vectors as vectors."""
+        return self.cross(vector)
+
+    def set(self, vector: Vector, /) -> Vector:
+        """Set coordinates of caller vector to match parameter vector."""
+        self.x = vector.x
+        self.y = vector.y
+        return self
+
+    def add(self, vector: Vector, /) -> Vector:
+        """Add caller vector with parameter vector, with modification to caller vector."""
+        self.x += vector.x
+        self.y += vector.y
+        return self
+
+    def sub(self, vector: Vector, /) -> Vector:
+        """Subtract parameter vector from caller vector, with modification to caller vector."""
+        self.x -= vector.x
+        self.y -= vector.y
+        return self
+
+    def mul(self, multiplier: float, /) -> Vector:
+        """Multiply vector coordinates by a number, with modification to vector."""
+        self.x *= multiplier
+        self.y *= multiplier
+        return self
+
+    def div(self, divisor: float, /) -> Vector:
+        """Divide vector coordinates by a number, with modification to vector."""
+        self.x /= divisor
+        self.y /= divisor
+        return self
+
+    def len(self) -> float:
+        """Find the distance to the origin."""
+        return hypot(self.x, self.y)
+
+    def dist(self, vector: Vector, /) -> float:
+        """Find the distance between two vectors."""
+        return hypot(self.x - vector.x, self.y - vector.y)
+
+    def dot(self, vector: Vector, /) -> float:
+        """Find the dot product of two vectors."""
+        return self.x * vector.x + self.y * vector.y
+
+    def cross(self, vector: Vector, /) -> float:
+        """Find the cross product of two vectors."""
+        return self.x * vector.y - self.y * vector.x
+
+    def copy(self) -> Vector:
+        """Copy the vector instance."""
+        return Vector(self.x, self.y)
+
+
+if __name__ == "__main__":
+    from time import sleep
+    print("Do not run me! This is just a dependency program")
+    sleep(5)
\ No newline at end of file

commit 45895724b49c5ed87d11464f17f7364fe2e014fa
Author: Elias Dobrin <elias@dobrin.net>
Date:   Thu Jun 2 16:26:08 2022 -0700

    Initial commit

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..b6e4761
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,129 @@
+# Byte-compiled / optimized / DLL files
+__pycache__/
+*.py[cod]
+*$py.class
+
+# C extensions
+*.so
+
+# Distribution / packaging
+.Python
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+wheels/
+pip-wheel-metadata/
+share/python-wheels/
+*.egg-info/
+.installed.cfg
+*.egg
+MANIFEST
+
+# PyInstaller
+#  Usually these files are written by a python script from a template
+#  before PyInstaller builds the exe, so as to inject date/other infos into it.
+*.manifest
+*.spec
+
+# Installer logs
+pip-log.txt
+pip-delete-this-directory.txt
+
+# Unit test / coverage reports
+htmlcov/
+.tox/
+.nox/
+.coverage
+.coverage.*
+.cache
+nosetests.xml
+coverage.xml
+*.cover
+*.py,cover
+.hypothesis/
+.pytest_cache/
+
+# Translations
+*.mo
+*.pot
+
+# Django stuff:
+*.log
+local_settings.py
+db.sqlite3
+db.sqlite3-journal
+
+# Flask stuff:
+instance/
+.webassets-cache
+
+# Scrapy stuff:
+.scrapy
+
+# Sphinx documentation
+docs/_build/
+
+# PyBuilder
+target/
+
+# Jupyter Notebook
+.ipynb_checkpoints
+
+# IPython
+profile_default/
+ipython_config.py
+
+# pyenv
+.python-version
+
+# pipenv
+#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
+#   However, in case of collaboration, if having platform-specific dependencies or dependencies
+#   having no cross-platform support, pipenv may install dependencies that don't work, or not
+#   install all needed dependencies.
+#Pipfile.lock
+
+# PEP 582; used by e.g. github.com/David-OConnor/pyflow
+__pypackages__/
+
+# Celery stuff
+celerybeat-schedule
+celerybeat.pid
+
+# SageMath parsed files
+*.sage.py
+
+# Environments
+.env
+.venv
+env/
+venv/
+ENV/
+env.bak/
+venv.bak/
+
+# Spyder project settings
+.spyderproject
+.spyproject
+
+# Rope project settings
+.ropeproject
+
+# mkdocs documentation
+/site
+
+# mypy
+.mypy_cache/
+.dmypy.json
+dmypy.json
+
+# Pyre type checker
+.pyre/
